// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: gangway.proto

package gangway

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Prow codebase currently uses the word "Prow Job" to mean both the
// definition and the execution, but we avoid that here (JobExecutionStatus
// instead of ProwJobStatus).
type JobExecutionStatus int32

const (
	JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED JobExecutionStatus = 0
	JobExecutionStatus_TRIGGERED                        JobExecutionStatus = 1
	JobExecutionStatus_PENDING                          JobExecutionStatus = 2
	JobExecutionStatus_SUCCESS                          JobExecutionStatus = 3
	JobExecutionStatus_FAILURE                          JobExecutionStatus = 4
	JobExecutionStatus_ABORTED                          JobExecutionStatus = 5
	JobExecutionStatus_ERROR                            JobExecutionStatus = 6
)

// Enum value maps for JobExecutionStatus.
var (
	JobExecutionStatus_name = map[int32]string{
		0: "JOB_EXECUTION_STATUS_UNSPECIFIED",
		1: "TRIGGERED",
		2: "PENDING",
		3: "SUCCESS",
		4: "FAILURE",
		5: "ABORTED",
		6: "ERROR",
	}
	JobExecutionStatus_value = map[string]int32{
		"JOB_EXECUTION_STATUS_UNSPECIFIED": 0,
		"TRIGGERED":                        1,
		"PENDING":                          2,
		"SUCCESS":                          3,
		"FAILURE":                          4,
		"ABORTED":                          5,
		"ERROR":                            6,
	}
)

func (x JobExecutionStatus) Enum() *JobExecutionStatus {
	p := new(JobExecutionStatus)
	*p = x
	return p
}

func (x JobExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gangway_proto_enumTypes[0].Descriptor()
}

func (JobExecutionStatus) Type() protoreflect.EnumType {
	return &file_gangway_proto_enumTypes[0]
}

func (x JobExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobExecutionStatus.Descriptor instead.
func (JobExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{0}
}

type JobExecutionType int32

const (
	JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED JobExecutionType = 0
	JobExecutionType_PERIODIC                       JobExecutionType = 1
	JobExecutionType_POSTSUBMIT                     JobExecutionType = 2
	JobExecutionType_PRESUBMIT                      JobExecutionType = 3
	JobExecutionType_BATCH                          JobExecutionType = 4
)

// Enum value maps for JobExecutionType.
var (
	JobExecutionType_name = map[int32]string{
		0: "JOB_EXECUTION_TYPE_UNSPECIFIED",
		1: "PERIODIC",
		2: "POSTSUBMIT",
		3: "PRESUBMIT",
		4: "BATCH",
	}
	JobExecutionType_value = map[string]int32{
		"JOB_EXECUTION_TYPE_UNSPECIFIED": 0,
		"PERIODIC":                       1,
		"POSTSUBMIT":                     2,
		"PRESUBMIT":                      3,
		"BATCH":                          4,
	}
)

func (x JobExecutionType) Enum() *JobExecutionType {
	p := new(JobExecutionType)
	*p = x
	return p
}

func (x JobExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gangway_proto_enumTypes[1].Descriptor()
}

func (JobExecutionType) Type() protoreflect.EnumType {
	return &file_gangway_proto_enumTypes[1]
}

func (x JobExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobExecutionType.Descriptor instead.
func (JobExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{1}
}

type CreateJobExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobDefinition *JobDefinition `protobuf:"bytes,1,opt,name=job_definition,json=jobDefinition,proto3" json:"job_definition,omitempty"`
	// The source code to clone. Typically this is your repo that you want to test
	// (for presubmits) or the repo whose master/main branch has changed (for
	// postsubmits).
	BaseRepo *GitReferenceDynamic `protobuf:"bytes,2,opt,name=base_repo,json=baseRepo,proto3" json:"base_repo,omitempty"`
	// Extra source code repositories to clone. This is typically used for
	// periodics that are not tied to any particular repo, but can be defined for
	// presubmits or postsubmits as well.
	//
	// Currently periodics can define an `extraRefs` YAML array that is almost the
	// same thing (minus the ability to define additional modifications to it, as
	// per the definition of GitRerefenceDynamic).
	//
	// The `extra_repos` here will only take precedence if defined.
	ExtraRepos []*GitReferenceDynamic `protobuf:"bytes,4,rep,name=extra_repos,json=extraRepos,proto3" json:"extra_repos,omitempty"`
	// These pod-spec options are used to further customize the execution
	// environment. These are critical for some components (e.g., identifying that
	// this pod is tied to a Gerrit change).
	PodSpecOptions *PodSpecOptions `protobuf:"bytes,5,opt,name=pod_spec_options,json=podSpecOptions,proto3" json:"pod_spec_options,omitempty"`
}

func (x *CreateJobExecutionRequest) Reset() {
	*x = CreateJobExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobExecutionRequest) ProtoMessage() {}

func (x *CreateJobExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobExecutionRequest.ProtoReflect.Descriptor instead.
func (*CreateJobExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{0}
}

func (x *CreateJobExecutionRequest) GetJobDefinition() *JobDefinition {
	if x != nil {
		return x.JobDefinition
	}
	return nil
}

func (x *CreateJobExecutionRequest) GetBaseRepo() *GitReferenceDynamic {
	if x != nil {
		return x.BaseRepo
	}
	return nil
}

func (x *CreateJobExecutionRequest) GetExtraRepos() []*GitReferenceDynamic {
	if x != nil {
		return x.ExtraRepos
	}
	return nil
}

func (x *CreateJobExecutionRequest) GetPodSpecOptions() *PodSpecOptions {
	if x != nil {
		return x.PodSpecOptions
	}
	return nil
}

type PodSpecOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envs        map[string]string `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PodSpecOptions) Reset() {
	*x = PodSpecOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSpecOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSpecOptions) ProtoMessage() {}

func (x *PodSpecOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSpecOptions.ProtoReflect.Descriptor instead.
func (*PodSpecOptions) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{1}
}

func (x *PodSpecOptions) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PodSpecOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PodSpecOptions) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Look up a single Prow Job execution.
type GetJobExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJobExecutionRequest) Reset() {
	*x = GetJobExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobExecutionRequest) ProtoMessage() {}

func (x *GetJobExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetJobExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobExecutionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Look up all Prow Job executions that match all fields given here.
type ListJobExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string             `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`         // Mapped to URL query parameter `job_name`.
	Status  JobExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=JobExecutionStatus" json:"status,omitempty"` // Mapped to URL query parameter `status`.
}

func (x *ListJobExecutionsRequest) Reset() {
	*x = ListJobExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobExecutionsRequest) ProtoMessage() {}

func (x *ListJobExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListJobExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{3}
}

func (x *ListJobExecutionsRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *ListJobExecutionsRequest) GetStatus() JobExecutionStatus {
	if x != nil {
		return x.Status
	}
	return JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED
}

type JobExecutions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobExecution []*JobExecution `protobuf:"bytes,1,rep,name=job_execution,json=jobExecution,proto3" json:"job_execution,omitempty"`
}

func (x *JobExecutions) Reset() {
	*x = JobExecutions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecutions) ProtoMessage() {}

func (x *JobExecutions) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecutions.ProtoReflect.Descriptor instead.
func (*JobExecutions) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{4}
}

func (x *JobExecutions) GetJobExecution() []*JobExecution {
	if x != nil {
		return x.JobExecution
	}
	return nil
}

type JobExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateJobExecutionRequest *CreateJobExecutionRequest `protobuf:"bytes,2,opt,name=create_job_execution_request,json=createJobExecutionRequest,proto3" json:"create_job_execution_request,omitempty"`
	Status                    JobExecutionStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=JobExecutionStatus" json:"status,omitempty"`
	Type                      JobExecutionType           `protobuf:"varint,4,opt,name=type,proto3,enum=JobExecutionType" json:"type,omitempty"`
	GcsPath                   string                     `protobuf:"bytes,5,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	CreateTime                *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                *timestamppb.Timestamp     `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	UpdatedBy                 string                     `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *JobExecution) Reset() {
	*x = JobExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecution) ProtoMessage() {}

func (x *JobExecution) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecution.ProtoReflect.Descriptor instead.
func (*JobExecution) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{5}
}

func (x *JobExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobExecution) GetCreateJobExecutionRequest() *CreateJobExecutionRequest {
	if x != nil {
		return x.CreateJobExecutionRequest
	}
	return nil
}

func (x *JobExecution) GetStatus() JobExecutionStatus {
	if x != nil {
		return x.Status
	}
	return JobExecutionStatus_JOB_EXECUTION_STATUS_UNSPECIFIED
}

func (x *JobExecution) GetType() JobExecutionType {
	if x != nil {
		return x.Type
	}
	return JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED
}

func (x *JobExecution) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *JobExecution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *JobExecution) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *JobExecution) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

// JobDefinition uniquely defines a single Prow Job from the vast sea of
// possible candidates.
type JobDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExecutionType      JobExecutionType     `protobuf:"varint,2,opt,name=execution_type,json=executionType,proto3,enum=JobExecutionType" json:"execution_type,omitempty"`
	InrepoconfigSource *GitReferenceDynamic `protobuf:"bytes,3,opt,name=inrepoconfig_source,json=inrepoconfigSource,proto3" json:"inrepoconfig_source,omitempty"`
}

func (x *JobDefinition) Reset() {
	*x = JobDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDefinition) ProtoMessage() {}

func (x *JobDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDefinition.ProtoReflect.Descriptor instead.
func (*JobDefinition) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{6}
}

func (x *JobDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobDefinition) GetExecutionType() JobExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return JobExecutionType_JOB_EXECUTION_TYPE_UNSPECIFIED
}

func (x *JobDefinition) GetInrepoconfigSource() *GitReferenceDynamic {
	if x != nil {
		return x.InrepoconfigSource
	}
	return nil
}

// A "static" Git reference that already exists somewhere on the internet.
type GitReferenceStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For GitHub repos, the "org" and "repo" can be parsed from the url. For
	// Gerrit, the "host" and "repo" can be parsed out.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// This is the 40-character SHA that uniquely identifies a commit.
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	// This is either the branch or tag that contains the commit defined above. We
	// need this because we need a starting point to search for the commit
	// (otherwise we're reduced to searching through all refs for this commit,
	// which can be expensive).
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GitReferenceStatic) Reset() {
	*x = GitReferenceStatic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitReferenceStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitReferenceStatic) ProtoMessage() {}

func (x *GitReferenceStatic) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitReferenceStatic.ProtoReflect.Descriptor instead.
func (*GitReferenceStatic) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{7}
}

func (x *GitReferenceStatic) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitReferenceStatic) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GitReferenceStatic) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

// A "dynamic" Git reference that doesn't exist yet, but is created by Prow
// by making modifications to static references.
type GitReferenceDynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *GitReferenceStatic `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// List of references to merge into the base reference. The url in each of
	// these must match the one defined in base.
	//
	// Presubmits use this to define additional either GitHub "pull requests" or
	// Gerrit "changes" to merge into the base Git reference before running the
	// job against it. Can be just 1 (e.g., a plain presubmit) or multiple (if we
	// are testing multiple PRs at once, such as in a batch job created by Tide).
	// API consumers will typically want to just define 1 additional ref to merge.
	RefsToMerge []*GitReferenceStatic `protobuf:"bytes,2,rep,name=refs_to_merge,json=refsToMerge,proto3" json:"refs_to_merge,omitempty"`
}

func (x *GitReferenceDynamic) Reset() {
	*x = GitReferenceDynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gangway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitReferenceDynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitReferenceDynamic) ProtoMessage() {}

func (x *GitReferenceDynamic) ProtoReflect() protoreflect.Message {
	mi := &file_gangway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitReferenceDynamic.ProtoReflect.Descriptor instead.
func (*GitReferenceDynamic) Descriptor() ([]byte, []int) {
	return file_gangway_proto_rawDescGZIP(), []int{8}
}

func (x *GitReferenceDynamic) GetBase() *GitReferenceStatic {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GitReferenceDynamic) GetRefsToMerge() []*GitReferenceStatic {
	if x != nil {
		return x.RefsToMerge
	}
	return nil
}

var File_gangway_proto protoreflect.FileDescriptor

var file_gangway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x6e, 0x67, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e,
	0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x39, 0x0a,
	0x10, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6a, 0x6f,
	0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x03, 0x0a, 0x0c, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x13, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x12, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x77, 0x0a, 0x13, 0x47, 0x69, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x2a, 0x88, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x4a, 0x4f, 0x42,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x6e, 0x0a,
	0x10, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x32, 0xa1, 0x02,
	0x0a, 0x04, 0x50, 0x72, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x20, 0x5a, 0x1e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x77, 0x2f, 0x67, 0x61, 0x6e, 0x67,
	0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gangway_proto_rawDescOnce sync.Once
	file_gangway_proto_rawDescData = file_gangway_proto_rawDesc
)

func file_gangway_proto_rawDescGZIP() []byte {
	file_gangway_proto_rawDescOnce.Do(func() {
		file_gangway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gangway_proto_rawDescData)
	})
	return file_gangway_proto_rawDescData
}

var file_gangway_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gangway_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_gangway_proto_goTypes = []interface{}{
	(JobExecutionStatus)(0),           // 0: JobExecutionStatus
	(JobExecutionType)(0),             // 1: JobExecutionType
	(*CreateJobExecutionRequest)(nil), // 2: CreateJobExecutionRequest
	(*PodSpecOptions)(nil),            // 3: PodSpecOptions
	(*GetJobExecutionRequest)(nil),    // 4: GetJobExecutionRequest
	(*ListJobExecutionsRequest)(nil),  // 5: ListJobExecutionsRequest
	(*JobExecutions)(nil),             // 6: JobExecutions
	(*JobExecution)(nil),              // 7: JobExecution
	(*JobDefinition)(nil),             // 8: JobDefinition
	(*GitReferenceStatic)(nil),        // 9: GitReferenceStatic
	(*GitReferenceDynamic)(nil),       // 10: GitReferenceDynamic
	nil,                               // 11: PodSpecOptions.EnvsEntry
	nil,                               // 12: PodSpecOptions.LabelsEntry
	nil,                               // 13: PodSpecOptions.AnnotationsEntry
	(*timestamppb.Timestamp)(nil),     // 14: google.protobuf.Timestamp
}
var file_gangway_proto_depIdxs = []int32{
	8,  // 0: CreateJobExecutionRequest.job_definition:type_name -> JobDefinition
	10, // 1: CreateJobExecutionRequest.base_repo:type_name -> GitReferenceDynamic
	10, // 2: CreateJobExecutionRequest.extra_repos:type_name -> GitReferenceDynamic
	3,  // 3: CreateJobExecutionRequest.pod_spec_options:type_name -> PodSpecOptions
	11, // 4: PodSpecOptions.envs:type_name -> PodSpecOptions.EnvsEntry
	12, // 5: PodSpecOptions.labels:type_name -> PodSpecOptions.LabelsEntry
	13, // 6: PodSpecOptions.annotations:type_name -> PodSpecOptions.AnnotationsEntry
	0,  // 7: ListJobExecutionsRequest.status:type_name -> JobExecutionStatus
	7,  // 8: JobExecutions.job_execution:type_name -> JobExecution
	2,  // 9: JobExecution.create_job_execution_request:type_name -> CreateJobExecutionRequest
	0,  // 10: JobExecution.status:type_name -> JobExecutionStatus
	1,  // 11: JobExecution.type:type_name -> JobExecutionType
	14, // 12: JobExecution.create_time:type_name -> google.protobuf.Timestamp
	14, // 13: JobExecution.update_time:type_name -> google.protobuf.Timestamp
	1,  // 14: JobDefinition.execution_type:type_name -> JobExecutionType
	10, // 15: JobDefinition.inrepoconfig_source:type_name -> GitReferenceDynamic
	9,  // 16: GitReferenceDynamic.base:type_name -> GitReferenceStatic
	9,  // 17: GitReferenceDynamic.refs_to_merge:type_name -> GitReferenceStatic
	2,  // 18: Prow.CreateJobExecution:input_type -> CreateJobExecutionRequest
	4,  // 19: Prow.GetJobExecution:input_type -> GetJobExecutionRequest
	5,  // 20: Prow.ListJobExecutions:input_type -> ListJobExecutionsRequest
	7,  // 21: Prow.CreateJobExecution:output_type -> JobExecution
	7,  // 22: Prow.GetJobExecution:output_type -> JobExecution
	6,  // 23: Prow.ListJobExecutions:output_type -> JobExecutions
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_gangway_proto_init() }
func file_gangway_proto_init() {
	if File_gangway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gangway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpecOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecutions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitReferenceStatic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gangway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitReferenceDynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gangway_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gangway_proto_goTypes,
		DependencyIndexes: file_gangway_proto_depIdxs,
		EnumInfos:         file_gangway_proto_enumTypes,
		MessageInfos:      file_gangway_proto_msgTypes,
	}.Build()
	File_gangway_proto = out.File
	file_gangway_proto_rawDesc = nil
	file_gangway_proto_goTypes = nil
	file_gangway_proto_depIdxs = nil
}
