- publisher:
    name: junit-publisher-fully-specified
    publishers:
    - raw:
        xml: |
          <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.9">
              <testResults>_artifacts/junit*.xml</testResults>
              <keepLongStdio>true</keepLongStdio>
              <testDataPublishers>
                  <de.esailors.jenkins.teststability.StabilityTestDataPublisher plugin="test-stability@1.0"/>
                  <com.google.jenkins.flakyTestHandler.plugin.JUnitFlakyTestDataPublisher plugin="flaky-test-handler@1.0.1"/>
                  <hudson.plugins.claim.ClaimTestDataPublisher plugin="claim@2.7"/>
              </testDataPublishers>
              <healthScaleFactor>100.0</healthScaleFactor>
              <allowEmptyResults>{allow-empty-results}</allowEmptyResults>
          </hudson.tasks.junit.JUnitResultArchiver>
- publisher:
    name: junit-publisher
    publishers:
    - junit-publisher-fully-specified:
        allow-empty-results: false
- builder:
    builders:
    - raw:
        xml: |
          <com.cloudbees.dockerpublish.DockerBuilder plugin="docker-build-publish@1.1">
              <server plugin="docker-commons@1.2"/>
              <registry plugin="docker-commons@1.2">
                  <credentialsId>{credentialsId}</credentialsId>
              </registry>
              <repoName>{repoName}</repoName>
              <noCache>true</noCache>
              <forcePull>true</forcePull>
              <dockerfilePath>{dockerfilePath}</dockerfilePath>
              <skipBuild>false</skipBuild>
              <skipDecorate>false</skipDecorate>
              <repoTag>{tag}</repoTag>
              <skipPush>false</skipPush>
              <createFingerprint>true</createFingerprint>
              <skipTagLatest>true</skipTagLatest>
          </com.cloudbees.dockerpublish.DockerBuilder>
    - shell: |
        #!/bin/bash
        set -e
        set -x
        docker rmi -f {repoName}:{tag}
    name: docker-build-publish
- defaults:
    cron-string: H/30 * * * *
    disable_job: false
    emails: ""
    jenkins-timeout: 600
    kill-timeout: 15
    legacy-runner: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/kubernetes/master/hack/jenkins/e2e-runner.sh")
    name: global
    old-runner-1-0: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.0/hack/jenkins/e2e.sh")
    old-runner-1-1: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.1/hack/jenkins/e2e.sh")
    post-env: |
      # Nothing should want Jenkins $HOME
      export HOME=${{WORKSPACE}}

      # Assume we're upping, testing, and downing a cluster
      export E2E_UP="${{E2E_UP:-true}}"
      export E2E_TEST="${{E2E_TEST:-true}}"
      export E2E_DOWN="${{E2E_DOWN:-true}}"

      # Skip gcloud update checking
      export CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK=true

      # AWS variables
      export KUBE_AWS_INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"

      # GCE variables
      export INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"
      export KUBE_GCE_NETWORK="${{E2E_NAME:-jenkins-e2e}}"
      export KUBE_GCE_INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"
      export GCE_SERVICE_ACCOUNT=$(gcloud auth list 2> /dev/null | grep active | cut -f3 -d' ')

      # GKE variables
      export CLUSTER_NAME="${{E2E_NAME:-jenkins-e2e}}"
      export KUBE_GKE_NETWORK="${{E2E_NAME:-jenkins-e2e}}"

      # Get golang into our PATH so we can run e2e.go
      export PATH="${{PATH}}:/usr/local/go/bin"
    report-rc: |
      if [[ ${{rc}} -eq 124 || ${{rc}} -eq 137 ]]; then
          echo "Build timed out" >&2
      elif [[ ${{rc}} -ne 0 ]]; then
          echo "Build failed" >&2
      fi
      echo "Exiting with code: ${{rc}}"
      exit ${{rc}}
    runner: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/kubernetes/master/hack/jenkins/dockerized-e2e-runner.sh")
    sq-cron-string: H/5 * * * *

