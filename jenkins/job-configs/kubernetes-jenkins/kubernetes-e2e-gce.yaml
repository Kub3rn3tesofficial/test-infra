- job-template:
    name: 'kubernetes-e2e-{suffix}'
    node: '{jenkins_node}'
    triggers:
        - reverse:
            jobs: '{trigger-job}'
            result: success
        - timed: '{cron-string}'
    description: '{description} Test owner: {test-owner}.'
    jenkins_node: 'e2e'
    disabled: '{obj:disable_job}'
    project-env: ''
    properties:
        - build-discarder:
            days-to-keep: 7
    # Need the 8 essential kube-system pods ready before declaring cluster ready
    # etcd-server, kube-apiserver, kube-controller-manager, kube-dns
    # kube-scheduler, l7-default-backend, l7-lb-controller, kube-addon-manager
    provider-env: |
        export KUBERNETES_PROVIDER="gce"
        export E2E_MIN_STARTUP_PODS="8"
        export KUBE_GCE_ZONE="us-central1-f"
        export FAIL_ON_GCP_RESOURCE_LEAK="true"
        export CLOUDSDK_CORE_PRINT_UNHANDLED_TRACEBACKS="1"
    builders:
        - activate-gce-service-account
        - shell: |
            {provider-env}
            {project-env}
            {job-env}
            {post-env}
            timeout -k {kill-timeout}m {timeout}m {runner} && rc=$? || rc=$?
            {report-rc}
    wrappers:
        - e2e-credentials-binding
        - timeout:
            timeout: '{jenkins-timeout}'
            fail: true
        - workspace-cleanup:
            dirmatch: true
            external-deletion-command: 'sudo rm -rf %s'
            exclude: ['**/.git/']
    publishers:
        - junit-publisher
        - email-ext:
            recipients: '{emails}'
        - gcs-uploader

- project:
    name: kubernetes-e2e-gce-enormous-cluster
    test-owner: 'gmarek'
    emails: 'gmarek@google.com'
    # TODO: Currently run it only manually. Fix it once we have all permissions.
    cron-string: ''
    trigger-job: ''
    branch: 'master'
    project-env: |
        # XXX Not a unique project
        export PROJECT="kubernetes-scale"
        export FAIL_ON_GCP_RESOURCE_LEAK="false"
        # Override GCE defaults.
        # Temporarily switch of Heapster, as this will not schedule anywhere.
        # TODO: Think of a solution to enable it.
        export KUBE_ENABLE_CLUSTER_MONITORING="none"
        # TODO: Move to us-central1-c once we have permission for it.
        export KUBE_GCE_ZONE="us-east1-a"
        export MASTER_SIZE="n1-standard-32"
        # Increase disk size to check if that helps for etcd latency.
        export MASTER_DISK_SIZE="100GB"
        export NODE_SIZE="n1-standard-1"
        export NODE_DISK_SIZE="50GB"
        # Reduce logs verbosity
        export TEST_CLUSTER_LOG_LEVEL="--v=1"
        # Switch off image puller to workaround #32191.
        export PREPULL_E2E_IMAGES="false"
        export MAX_INSTANCES_PER_MIG="1000"
        # Increase resync period to simulate production
        export TEST_CLUSTER_RESYNC_PERIOD="--min-resync-period=12h"
        # Increase delete collection parallelism
        export TEST_CLUSTER_DELETE_COLLECTION_WORKERS="--delete-collection-workers=16"
        # =========================================
        # Configuration we are targetting in 1.5
        export TEST_ETCD_IMAGE="3.0.14-experimental.1"
        export TEST_ETCD_VERSION="3.0.14"
        export STORAGE_BACKEND="etcd3"
        export TEST_CLUSTER_STORAGE_CONTENT_TYPE="--storage-media-type=application/vnd.kubernetes.protobuf"
        export KUBE_NODE_OS_DISTRIBUTION="gci"
    suffix:
        - 'gce-enormous-cluster':  # kubernetes-e2e-gce-enormous-cluster
            description: 'Starts and deletes empty 2000 node cluster and runs scalability tests on it. Does allow few Nodes to fail during startup.'
            timeout: 1400
            job-env: |
                export E2E_NAME="e2e-enormous-cluster"
                export GINKGO_TEST_ARGS="--ginkgo.focus=\[Feature:Performance\] \
                    --kube-api-content-type=application/vnd.kubernetes.protobuf \
                    --allowed-not-ready-nodes=20"
                # TODO: re-enable service creation after we debug problems with this suite
                # export CREATE_SERVICES="true"
                export CLUSTER_IP_RANGE="10.224.0.0/12"
                export NUM_NODES="3000"
                export ALLOWED_NOTREADY_NODES="20"
                # Increase throughput in master components.
                export CONTROLLER_MANAGER_TEST_ARGS="--kube-api-qps=100 --kube-api-burst=100"
                export SCHEDULER_TEST_ARGS="--kube-api-qps=100 --kube-api-burst=100"
                # Increase limit for inflight requests in apiserver.
                export APISERVER_TEST_ARGS="--max-requests-inflight=1000"
                # Increase throughput in Load test.
                export LOAD_TEST_THROUGHPUT=30
        - 'gce-enormous-deploy':  # kuberentes-e2e-gce-enormous-deploy
            description: 'Starts up empty 2000 node cluster and waits until it is running. Used for manual testing.'
            timeout: 300
            job-env: |
                export E2E_NAME="e2e-enormous-deploy"
                export GINKGO_TEST_ARGS="--ginkgo.focus=\[Feature:Empty\]"
                export CLUSTER_IP_RANGE="10.224.0.0/13"
                export NUM_NODES="2000"
                export ALLOWED_NOTREADY_NODES="20"
                export E2E_DOWN="false"
        - 'gce-enormous-teardown':  # kuberentes-e2e-gce-enormous-deploy
            description: 'Tears down a cluster created by gce-enormous-deploy.'
            timeout: 180
            job-env: |
                export E2E_NAME="e2e-enormous-deploy"
                export CLUSTER_IP_RANGE="10.224.0.0/13"
                export NUM_NODES="2000"
                export ALLOWED_NOTREADY_NODES="20"
                export E2E_TEST="false"
                export E2E_UP="false"
    jobs:
        - 'kubernetes-e2e-{suffix}'
