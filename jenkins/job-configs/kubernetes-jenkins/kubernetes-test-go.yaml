- job-template:
    builders:
    - shell: JENKINS_BUILD_STARTED=true bash <(curl -fsS --retry 3 "https://raw.githubusercontent.com/kubernetes/kubernetes/master/hack/jenkins/upload-to-gcs.sh")
    - shell: |
        export KUBE_FORCE_VERIFY_CHECKS='y'
        export KUBE_VERIFY_GIT_BRANCH='{branch}'
        timeout -k {kill-timeout}m {timeout}m ./hack/jenkins/gotest-dockerized.sh && rc=$? || rc=$?
        {report-rc}
    description: |
      Grab the latest from GitHub, then run unit and integration tests.<br>
      Test Owner: Build Cop
    name: kubernetes-test-{suffix}
    node: unittest
    properties:
    - build-discarder:
        num-to-keep: 200
    publishers:
    - claim-build
    - log-parser
    - email-ext
    - xunit:
        thresholds:
        - failed:
            failure: null
            failurenew: null
            unstable: 0
            unstablenew: 0
        - skipped:
            failure: null
            failurenew: null
            unstable: null
            unstablenew: null
        types:
        - junit:
            deleteoutput: false
            pattern: _artifacts/**.xml
    - gcs-uploader
    scm:
    - git:
        branches:
        - '{branch}'
        browser: githubweb
        browser-url: https://github.com/kubernetes/kubernetes
        skip-tag: true
        url: https://github.com/kubernetes/kubernetes
        wipe-workspace: false
    triggers:
    - pollscm:
        cron: H/2 * * * *
    - timed: '{cron-string}'
    wrappers:
    - ansicolor:
        colormap: xterm
    - timeout:
        fail: true
        timeout: '{jenkins-timeout}'
    - timestamps
    - workspace-cleanup:
        dirmatch: true
        external-deletion-command: sudo rm -rf %s
- project:
    jobs:
    - kubernetes-test-{suffix}
    name: kubernetes-test-go
    suffix:
    - go:
        branch: master
        cron-string: '{sq-cron-string}'
        timeout: 100
    - go-release-1.3:
        branch: release-1.3
        cron-string: '{sq-cron-string}'
        timeout: 100
    - go-release-1.2:
        branch: release-1.2
        cron-string: H H/3 * * *
        timeout: 100
    - go-release-1.1:
        branch: release-1.1
        cron-string: H H/12 * * *
        timeout: 60

