- job-template:
    name: '{git-project}-pull-{suffix}'
    # defaults
    success-comment: ''
    failure-comment: ''
    error-comment: ''
    git-basedir: ''
    skip-if-no-test-files: false
    status-add-test-results: true
    only-trigger-phrase: false

    concurrent: true
    properties:
        - build-discarder:
            days-to-keep: 7
        - github:
            url: 'https://github.com/{repo-name}'
        - throttle:
            max-total: '{max-total}'
            max-per-node: 2
            option: project
        - raw:
            xml: |
                <com.cloudbees.plugins.JobPrerequisites plugin="slave-prerequisites@1.0">
                    <script>docker version; gcloud version</script>
                    <interpreter>shell script</interpreter>
                </com.cloudbees.plugins.JobPrerequisites>
    parameters:
        - string:
            name: sha1
            description: 'sha1 or refname (e.g. origin/pr/N/head) to build'
    scm:
        - git:
            remotes:
                - remote:
                    url: 'https://github.com/{repo-name}'
                    refspec: '+refs/heads/*:refs/remotes/upstream/*'
                - remote:
                    url: 'https://github.com/{repo-name}'
                    refspec: '+refs/pull/${{ghprbPullId}}/merge:refs/remotes/origin/pr/${{ghprbPullId}}/merge'
            branches:
                - 'origin/pr/${{ghprbPullId}}/merge'
            basedir: '{git-basedir}'
            browser: githubweb
            browser-url: 'http://github.com/{repo-name}'
            timeout: 20
            clean:
                after: true
            wipe-workspace: false
            skip-tag: true
    triggers:
        - github-pull-request:
            # This is the Jenkins GHPRB plugin ID, not the actual github token.
            auth-id: 'f8e31bc1-9abb-460a-a2ca-9c4aae3ca4e8'
            only-trigger-phrase: '{only-trigger-phrase}'
            trigger-phrase: '(?is).*@k8s-bot\s+{trigger-phrase}\s+this.*'
            cron: 'H/2 * * * *'
            status-context: Jenkins {status-context}
            status-url: 'https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/'
            status-add-test-results: '{status-add-test-results}'
            # This should roughly line up with kubernetes-maintainers.
            # To update:
            #   curl -s "https://api.github.com/teams/1674435/members?per_page=100&access_token=TOKEN" \
            #     | jq -r .[].login | sort -f
            # If the team grows over 100 members, you may need to add &page=2 to get the rest.
            #
            # Note that k8s-merge-robot is not in this team, so is explicitly listed here.
            admin-list:
                - k8s-merge-robot
                - alex-mohr
                - amygdala
                - andyzheng0831
                - apelisse
                - a-robinson
                - aronchick
                - bgrant0607
                - bgrant0607-nocc
                - bprashanth
                - brendandburns
                - caesarxuchao
                - childsb
                - cjcullen
                - david-mcmahon
                - davidopp
                - dchen1107
                - deads2k
                - derekwaynecarr
                - dubstack
                - eparis
                - erictune
                - fabioy
                - fejta
                - fgrzadkowski
                - freehan
                - ghodss
                - girishkalele
                - gmarek
                - goltermann
                - grodrigues3
                - hurf
                - ingvagabund
                - ixdy
                - jackgr
                - janetkuo
                - jbeda
                - jdef
                - jfrazelle
                - jingxu97
                - jlowdermilk
                - jsafrane
                - jszczepkowski
                - justinsb
                - kargakis
                - karlkfi
                - kelseyhightower
                - kevin-wangzefeng
                - krousey
                - lavalamp
                - liggitt
                - luxas
                - madhusudancs
                - maisem
                - mansoorj
                - matchstick
                - mbohlool
                - mikedanese
                - mml
                - mtaufen
                - mwielgus
                - ncdc
                - nikhiljindal
                - piosz
                - pmorie
                - pwittrock
                - Q-Lee
                - quinton-hoole
                - Random-Liu
                - rmmh
                - roberthbailey
                - ronnielai
                - saad-ali
                - sarahnovotny
                - smarterclayton
                - soltysh
                - spxtr
                - sttts
                - swagiaal
                - thockin
                - timothysc
                - timstclair
                - tmrts
                - vishh
                - vulpecula
                - wojtek-t
                - xiang90
                - yifan-gu
                - yujuhong
                - zmerlynn
            # This should roughly line up with kubernetes-collaborators.
            # To update:
            #   curl -s "https://api.github.com/teams/1696393/members?per_page=100&access_token=TOKEN" \
            #     | jq -r .[].login | sort -f
            # If the team grows over 100 members, you may need to add &page=2 to get the rest.
            white-list:
                - aaronlevy
                - AdoHe
                - amygdala
                - aronchick
                - arun-gupta
                - ashcrow
                - aveshagarwal
                - bgrant0607
                - bparees
                - brendandburns
                - briyenga08
                - cameronbrunner
                - childsb
                - chrislovecnm
                - colemickens
                - david-mcmahon
                - dchen1107
                - deads2k
                - detiber
                - Dingshujie
                - DirectXMan12
                - feihujiang
                - feiskyer
                - foxish
                - ghodss
                - grodrigues3
                - HaiyangDING
                - Hui-Zhi
                - hurf
                - idvoretskyi
                - ingvagabund
                - ironcladlou
                - jackgr
                - jayunit100
                - jeremyeder
                - johnwilkes
                - jsafrane
                - kevin-wangzefeng
                - lavalamp
                - luxas
                - maisem
                - marekbiskup
                - markturansky
                - matchstick
                - mattf
                - mbohlool
                - mgr01
                - mikedanese
                - mksalawa
                - mml
                - mnshaw
                - mqliang
                - mtaufen
                - mwringe
                - ncdc
                - nhlfr
                - philips
                - preillyme
                - pweil-
                - Q-Lee
                - resouer
                - ronnielai
                - rootfs
                - rrati
                - saad-ali
                - sarahnovotny
                - senorflor
                - sjenning
                - soltysh
                - spiffxp
                - swagiaal
                - therc
                - timothysc
                - timstclair
                - wattsteve
                - yujuhong
            org-list:
                - kubernetes
            white-list-target-branches:
                - master
                - release-.*
            success-comment: '{success-comment}'
            failure-comment: '{failure-comment}'
            error-comment: '{error-comment}'
    wrappers:
        - e2e-credentials-binding
        - inject:
            properties-content: |
                GOROOT=/usr/local/go
                GOPATH=$WORKSPACE/go
                PATH=$PATH:$GOROOT/bin:$WORKSPACE/go/bin
        - workspace-cleanup:
            dirmatch: true
            external-deletion-command: 'sudo rm -rf %s'
        - timeout:
            timeout: 90
            fail: true
        - ansicolor:
            colormap: xterm
    builders:
        - activate-gce-service-account
        - ensure-upload-to-gcs-script:
            git-basedir: '{git-basedir}'
        - shell: JENKINS_BUILD_STARTED=true "${{WORKSPACE}}/_tmp/upload-to-gcs.sh"
        - shell: |
              if [[ -n '{git-basedir}' ]]; then cd '{git-basedir}'; fi
              {cmd}
    publishers:
        - xunit:
            thresholds:
                - failed:
                    unstable:
                    unstablenew:
                    failure:
                    failurenew:
                - skipped:
                    unstable:
                    unstablenew:
                    failure:
                    failurenew:
            types:
                - junit:
                    skip-if-no-test-files: '{skip-if-no-test-files}'
                    pattern: '_artifacts/**.xml'
                    deleteoutput: false
        - gcs-uploader:
            git-basedir: '{git-basedir}'

- project:
    name: kubernetes-pull
    git-project: 'kubernetes'
    repo-name: 'kubernetes/kubernetes'
    suffix:
      - test-unit-integration: # kubernetes-pull-test-unit-integration
          status-context: unit/integration
          max-total: 0 # Unlimited
          trigger-phrase: 'unit\s+test'
          cmd: |
            export KUBE_VERIFY_GIT_BRANCH="${{ghprbTargetBranch}}"
            ./hack/jenkins/gotest-dockerized.sh
      - verify-all: # kubernetes-pull-verify-all
          status-context: verification
          max-total: 0 # Unlimited
          skip-if-no-test-files: true  # We do not expect JUnit output from this job.
          status-add-test-results: false
          trigger-phrase: 'verify'
          cmd: |
            export KUBE_VERIFY_GIT_BRANCH="${{ghprbTargetBranch}}"
            export KUBE_TEST_SCRIPT="./hack/jenkins/verify-dockerized.sh"
            ./hack/jenkins/gotest-dockerized.sh
      - build-test-e2e-gke: # kubernetes-pull-build-test-e2e-gke
          status-context: GKE smoke e2e
          max-total: 12
          trigger-phrase: 'e2e\s+test'
          cmd: |
            if [[ "${{ghprbTargetBranch:-}}" == "release-1.0" || "${{ghprbTargetBranch:-}}" == "release-1.1" ]]; then
              echo "PR GKE job disabled for legacy branches."
              exit
            fi

            export KUBE_SKIP_PUSH_GCS=n
            export KUBE_GCS_RELEASE_BUCKET=kubernetes-release-pull
            export KUBE_RUN_FROM_OUTPUT=y
            export KUBE_FASTBUILD=true
            export KUBE_GCS_UPDATE_LATEST=n

            ./hack/jenkins/build.sh

            version=$(source build/util.sh && echo $(kube::release::semantic_version))
            gsutil -m rsync -r "gs://kubernetes-release-pull/ci/${{version}}" "gs://kubernetes-release-dev/ci/${{version}}-pull"
            # Strip off the leading 'v' from the cluster version.
            export CLUSTER_API_VERSION="${{version:1}}-pull"

            # Nothing should want Jenkins $HOME
            export HOME=${{WORKSPACE}}

            export KUBERNETES_PROVIDER="gke"
            export E2E_MIN_STARTUP_PODS="1"
            export FAIL_ON_GCP_RESOURCE_LEAK="true"

            # Experimental flake detection-- harmlessly does nothing until
            # ginkgo changes get made, but allows for testing them in a PR.
            export GINKGO_TOLERATE_FLAKES="y"

            export E2E_NAME="e2e-gke-${{NODE_NAME}}-${{EXECUTOR_NUMBER}}"
            export GINKGO_PARALLEL="y"
            # Just run a smoke test.
            export GINKGO_TEST_ARGS="--ginkgo.focus=Guestbook"
            export FAIL_ON_GCP_RESOURCE_LEAK="false"
            export PROJECT="k8s-jkns-pr-gke"
            # Since we're only running one test, just use two nodes.
            export NUM_NODES="2"

            # Assume we're upping, testing, and downing a cluster
            export E2E_UP="true"
            export E2E_TEST="true"
            export E2E_DOWN="true"
            export E2E_OPT="--check_version_skew=false"

            # Skip gcloud update checking
            export CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK=true

            # GKE variables
            export CLUSTER_NAME=${{E2E_NAME}}
            export KUBE_GKE_NETWORK=${{E2E_NAME}}
            export ZONE="us-central1-f"
            export CLOUDSDK_API_ENDPOINT_OVERRIDES_CONTAINER="https://test-container.sandbox.googleapis.com/"
            export CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE=False

            # Get golang into our PATH so we can run e2e.go
            export PATH=${{PATH}}:/usr/local/go/bin

            timeout -k 15m 55m ./hack/jenkins/e2e-runner.sh && rc=$? || rc=$?
            if [[ ${{rc}} -ne 0 ]]; then
              if [[ -x cluster/log-dump.sh && -d _artifacts ]]; then
                echo "Dumping logs for any remaining nodes"
                ./cluster/log-dump.sh _artifacts
              fi
            fi
            if [[ ${{rc}} -eq 124 || ${{rc}} -eq 137 ]]; then
              echo "Build timed out" >&2
            elif [[ ${{rc}} -ne 0 ]]; then
              echo "Build failed" >&2
            fi
            echo "Exiting with code: ${{rc}}"
            exit ${{rc}}

      - build-test-e2e-gce: # kubernetes-pull-build-test-e2e-gce
          status-context: GCE e2e
          max-total: 12
          success-comment: |
            GCE e2e build/test **passed** for commit ${{ghprbActualCommit}}.
            * [Test Results](https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}})
            * [Build Log](http://pr-test.k8s.io/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            * [Test Artifacts](https://console.developers.google.com/storage/browser/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/artifacts/)
            * [Internal Jenkins Results](${{JOB_URL}}/${{BUILD_NUMBER}})
          failure-comment: |
            GCE e2e build/test **failed** for commit ${{ghprbActualCommit}}.
            * [Test Results](https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}})
            * [Build Log](http://pr-test.k8s.io/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            * [Test Artifacts](https://console.developers.google.com/storage/browser/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/artifacts/)
            * [Internal Jenkins Results](${{JOB_URL}}/${{BUILD_NUMBER}})

            Please reference the [list of currently known flakes](https://github.com/kubernetes/kubernetes/issues?q=is:issue+label:kind/flake+is:open) when examining this failure. If you request a re-test, you must reference the issue describing the flake.
          error-comment: |
            GCE e2e build/test **errored** for commit ${{ghprbActualCommit}}.
            * [Test Results](https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}})
            * [Build Log](http://pr-test.k8s.io/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            * [Test Artifacts](https://console.developers.google.com/storage/browser/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/artifacts/)
            * [Internal Jenkins Results](${{JOB_URL}}/${{BUILD_NUMBER}})

            Please reference the [list of currently known flakes](https://github.com/kubernetes/kubernetes/issues?q=is:issue+label:kind/flake+is:open) when examining this failure. If you request a re-test, you must reference the issue describing the flake.
          trigger-phrase: 'e2e\s+test'
          cmd: |
            export KUBE_SKIP_PUSH_GCS=y
            export KUBE_RUN_FROM_OUTPUT=y
            export KUBE_FASTBUILD=true
            ./hack/jenkins/build.sh
            if [[ "${{ghprbTargetBranch:-}}" == "release-1.0" || "${{ghprbTargetBranch:-}}" == "release-1.1" ]]; then
              ./hack/jenkins/e2e.sh
            else
              # Nothing should want Jenkins $HOME
              export HOME=${{WORKSPACE}}

              export KUBERNETES_PROVIDER="gce"
              export E2E_MIN_STARTUP_PODS="1"
              export KUBE_GCE_ZONE="us-central1-f"
              export FAIL_ON_GCP_RESOURCE_LEAK="true"

              # Experimental flake detection-- harmlessly does nothing until
              # ginkgo changes get made, but allows for testing them in a PR.
              export GINKGO_TOLERATE_FLAKES="y"

              export E2E_NAME="e2e-gce-${{NODE_NAME}}-${{EXECUTOR_NUMBER}}"
              export GINKGO_PARALLEL="y"
              # This list should match the list in kubernetes-e2e-gce.
              export GINKGO_TEST_ARGS="--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]"
              export FAIL_ON_GCP_RESOURCE_LEAK="false"
              export PROJECT="k8s-jkns-pr-gce"
              # NUM_NODES should match kubernetes-e2e-gce.
              export NUM_NODES="3"

              # Assume we're upping, testing, and downing a cluster
              export E2E_UP="true"
              export E2E_TEST="true"
              export E2E_DOWN="true"

              # Skip gcloud update checking
              export CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK=true

              # GCE variables
              export INSTANCE_PREFIX=${{E2E_NAME}}
              export KUBE_GCE_NETWORK=${{E2E_NAME}}
              export KUBE_GCE_INSTANCE_PREFIX=${{E2E_NAME}}

              # Get golang into our PATH so we can run e2e.go
              export PATH=${{PATH}}:/usr/local/go/bin

              timeout -k 15m 55m ./hack/jenkins/e2e-runner.sh && rc=$? || rc=$?
              if [[ ${{rc}} -ne 0 ]]; then
                if [[ -x cluster/log-dump.sh && -d _artifacts ]]; then
                  echo "Dumping logs for any remaining nodes"
                  ./cluster/log-dump.sh _artifacts
                fi
              fi
              if [[ ${{rc}} -eq 124 || ${{rc}} -eq 137 ]]; then
                echo "Build timed out" >&2
              elif [[ ${{rc}} -ne 0 ]]; then
                echo "Build failed" >&2
              fi
              echo "Exiting with code: ${{rc}}"
              exit ${{rc}}
            fi

      - build-test-federation-e2e-gce: # kubernetes-pull-build-test-federation-e2e-gce
          status-context: Federation GCE e2e
          max-total: 12
          only-trigger-phrase: true  # This test should run only if explicitly triggered.
          trigger-phrase: 'federation\s+gce\s+e2e\s+test'
          cmd: |
            export KUBE_SKIP_PUSH_GCS=y
            export KUBE_RUN_FROM_OUTPUT=y
            export KUBE_FASTBUILD=true
            ./hack/jenkins/build.sh
            # Nothing should want Jenkins $HOME
            export HOME=${{WORKSPACE}}

            export KUBERNETES_PROVIDER="gce"
            export E2E_MIN_STARTUP_PODS="1"
            export FAIL_ON_GCP_RESOURCE_LEAK="true"

            # Experimental flake detection-- harmlessly does nothing until
            # ginkgo changes get made, but allows for testing them in a PR.
            export GINKGO_TOLERATE_FLAKES="y"

            export E2E_NAME="federation-e2e-gce-${{NODE_NAME}}-${{EXECUTOR_NUMBER}}"
            export FAIL_ON_GCP_RESOURCE_LEAK="false"
            export NUM_NODES="3"

            # Assume we're upping, testing, and downing a cluster
            export E2E_UP="true"
            export E2E_TEST="true"
            export E2E_DOWN="true"

            # Skip gcloud update checking
            export CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK=true

            # GCE variables
            export INSTANCE_PREFIX=${{E2E_NAME}}
            export KUBE_GCE_NETWORK=${{E2E_NAME}}
            export KUBE_GCE_INSTANCE_PREFIX=${{E2E_NAME}}

            # Get golang into our PATH so we can run e2e.go
            export PATH=${{PATH}}:/usr/local/go/bin

            # Federation specific params
            export FEDERATION="true"
            export PROJECT="k8s-jkns-pr-bldr-e2e-gce-fdrtn"
            export FEDERATION_PUSH_REPO_BASE="gcr.io/k8s-jkns-pr-bldr-e2e-gce-fdrtn"
            export GINKGO_PARALLEL="n" # We don't have namespaces yet in federation apiserver, so we need to serialize
            export GINKGO_TEST_ARGS="--ginkgo.focus=\[Feature:Federation\]"
            export E2E_ZONES="us-central1-a us-central1-f" # Where the clusters will be created. Federation components are now deployed to the last one.
            export KUBE_GCE_ZONE="us-central1-f" #TODO(colhom): This should be generalized out to plural case
            export DNS_ZONE_NAME="k8s-federation.com."
            export FEDERATIONS_DOMAIN_MAP="federation=k8s-federation.com"
            export KUBE_GCS_RELEASE_BUCKET=kubernetes-federation-release
            export KUBE_GCS_DEV_RELEASE_BUCKET=kubernetes-federation-release

            timeout -k 15m 55m ./hack/jenkins/e2e-runner.sh && rc=$? || rc=$?
            if [[ ${{rc}} -ne 0 ]]; then
              if [[ -x cluster/log-dump.sh && -d _artifacts ]]; then
                echo "Dumping logs for any remaining nodes"
                ./cluster/log-dump.sh _artifacts
              fi
            fi
            if [[ ${{rc}} -eq 124 || ${{rc}} -eq 137 ]]; then
              echo "Build timed out" >&2
            elif [[ ${{rc}} -ne 0 ]]; then
              echo "Build failed" >&2
            fi
            echo "Exiting with code: ${{rc}}"
            exit ${{rc}}

    jobs:
        - '{git-project}-pull-{suffix}'

- project:
    name: node-pull
    git-project:
        - 'cadvisor':
            repo-name: 'google/cadvisor'
            git-basedir: 'go/src/github.com/google/cadvisor'
            suffix: 'build-test-e2e'
            owner: 'stclair@google.com'
            max-total: 1
            skip-if-no-test-files: true  # no JUnit produced
            status-add-test-results: false
            trigger-phrase: 'test'
            status-context: 'GCE e2e'
            success-comment: |
                Jenkins GCE e2e

                Build/test **passed** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            failure-comment: |
                Jenkins GCE e2e

                Build/test **failed** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            error-comment: |
                Jenkins GCE e2e

                Build/test **errored** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            cmd: 'BUILDER=true build/jenkins_e2e.sh'
        - 'heapster':
            repo-name: 'kubernetes/heapster'
            git-basedir: 'go/src/k8s.io/heapster'
            suffix: 'build-test-e2e'
            owner: 'pszczesniak@google.com'
            max-total: 1
            skip-if-no-test-files: true  # no JUnit produced
            status-add-test-results: false
            trigger-phrase: 'test'
            status-context: 'GCE e2e'
            success-comment: |
                Jenkins GCE e2e

                Build/test **passed** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            failure-comment: |
                Jenkins GCE e2e

                Build/test **failed** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            error-comment: |
                Jenkins GCE e2e

                Build/test **errored** for commit ${{ghprbActualCommit}}.
                * [Build Log](https://storage.cloud.google.com/kubernetes-jenkins/pr-logs/pull/${{ghprbPullId}}/${{JOB_NAME}}/${{BUILD_NUMBER}}/build-log.txt)
            cmd: 'make test-unit test-integration'
        - 'node':  # kubelet on post-commit Jenkins
            # GCP project set in kubernetes/test/e2e_node/jenkins/jenkins-pull.properties:
            # PROJECT="k8s-jkns-pr-node-e2e"
            repo-name: 'kubernetes/kubernetes'
            git-basedir: 'go/src/k8s.io/kubernetes'
            suffix: 'build-e2e-test'
            owner: 'pwittroc@google.com'
            max-total: 10
            skip-if-no-test-files:   # old branches may not produce JUnit
            trigger-phrase: 'node e2e test'
            status-context: 'GCE Node e2e'
            cmd: './test/e2e_node/jenkins/e2e-node-jenkins.sh ./test/e2e_node/jenkins/jenkins-pull.properties'
    jobs:
        - '{git-project}-pull-{suffix}'
