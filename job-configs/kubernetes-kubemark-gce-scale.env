ENABLE_GARBAGE_COLLECTOR=true
# XXX Not a unique project
E2E_NAME=kubemark-2000
PROJECT=kubernetes-scale
E2E_TEST=false
USE_KUBEMARK=true
KUBEMARK_TESTS=\[Feature:Performance\]
KUBEMARK_TEST_ARGS=--gather-resource-usage=true --garbage-collector-enabled=true --kube-api-content-type=application/vnd.kubernetes.protobuf
# Increase throughput in Kubemark master components.
KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS=--kube-api-qps=100 --kube-api-burst=100
# Increase throughput in Load test.
LOAD_TEST_THROUGHPUT=50
FAIL_ON_GCP_RESOURCE_LEAK=false
# Override defaults to be independent from GCE defaults and set kubemark parameters
# We need 11 so that we won't hit max-pods limit (set to 100). TODO: do it in a nicer way.
NUM_NODES=21
MASTER_SIZE=n1-standard-4
# Note: can fit about 17 hollow nodes per core so NUM_NODES x
# cores_per_node should be set accordingly.
NODE_SIZE=n1-standard-8
KUBEMARK_MASTER_SIZE=n1-standard-32
KUBEMARK_NUM_NODES=2000
KUBE_GCE_ZONE=us-central1-f
# Use protobufs
TEST_CLUSTER_API_CONTENT_TYPE=--kube-api-content-type=application/vnd.kubernetes.protobuf
# TODO: Uncomment when we make the final decision to store protobufs in etcd.
# TEST_CLUSTER_STORAGE_CONTENT_TYPE=--storage-media-type=application/vnd.kubernetes.protobuf
# The kubemark scripts build a Docker image
JENKINS_ENABLE_DOCKER_IN_DOCKER=y
KUBE_NODE_OS_DISTRIBUTION=debian
