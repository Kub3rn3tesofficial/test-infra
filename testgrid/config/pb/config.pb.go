/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	TestNameConfig
	Notification
	TestGroup
	Dashboard
	LinkTemplate
	LinkOptionsTemplate
	DashboardTab
	DashboardGroup
	Configuration
	DefaultConfiguration
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestGroup_TestsName int32

const (
	TestGroup_TESTS_NAME_MIN     TestGroup_TestsName = 0
	TestGroup_TESTS_NAME_IGNORE  TestGroup_TestsName = 1
	TestGroup_TESTS_NAME_REPLACE TestGroup_TestsName = 2
	TestGroup_TESTS_NAME_APPEND  TestGroup_TestsName = 3
)

var TestGroup_TestsName_name = map[int32]string{
	0: "TESTS_NAME_MIN",
	1: "TESTS_NAME_IGNORE",
	2: "TESTS_NAME_REPLACE",
	3: "TESTS_NAME_APPEND",
}
var TestGroup_TestsName_value = map[string]int32{
	"TESTS_NAME_MIN":     0,
	"TESTS_NAME_IGNORE":  1,
	"TESTS_NAME_REPLACE": 2,
	"TESTS_NAME_APPEND":  3,
}

func (x TestGroup_TestsName) String() string {
	return proto.EnumName(TestGroup_TestsName_name, int32(x))
}
func (TestGroup_TestsName) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Specifies the test name.
type TestNameConfig struct {
	// The name elements specifying the target test name for this tab.
	NameElements []*TestNameConfig_NameElement `protobuf:"bytes,1,rep,name=name_elements,json=nameElements" yaml:"name_elements,omitempty"`
	// Specifies a printf-style format string for name elements. The format
	// string should have as many conversions as there are name_elements.
	// For example, two name_elements could be used with name_format="%s: %s".
	NameFormat string `protobuf:"bytes,2,opt,name=name_format,json=nameFormat" yaml:"name_format,omitempty"`
}

func (m *TestNameConfig) Reset()                    { *m = TestNameConfig{} }
func (m *TestNameConfig) String() string            { return proto.CompactTextString(m) }
func (*TestNameConfig) ProtoMessage()               {}
func (*TestNameConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestNameConfig) GetNameElements() []*TestNameConfig_NameElement {
	if m != nil {
		return m.NameElements
	}
	return nil
}

// Specifies name elements to be selected from configuration values
type TestNameConfig_NameElement struct {
	// Configuration value to use.
	// Valid choice are:
	// 'Tests name': The name of a test case
	// 'Commit': The commit number of the build
	// 'Context', 'Thread': The info extracted from each junit files:
	//    - junit_core-os_01.xml -> Context: core-os, Thread: 01
	//    - junit_runner.xml -> Context: runner
	//    - junit_01.xml -> Thread: 01
	// or any metadata key from finished.json, which is copied from your test suite.
	//
	// A valid sample TestNameConfig looks like:
	// test_name_config:
	//   name_elements:
	//   - target_config: Tests name
	//   - target_config: Context
	//   name_format: '%s [%s]'
	TargetConfig string `protobuf:"bytes,2,opt,name=target_config,json=targetConfig" yaml:"target_config,omitempty"`
}

func (m *TestNameConfig_NameElement) Reset()                    { *m = TestNameConfig_NameElement{} }
func (m *TestNameConfig_NameElement) String() string            { return proto.CompactTextString(m) }
func (*TestNameConfig_NameElement) ProtoMessage()               {}
func (*TestNameConfig_NameElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// A single notification.
type Notification struct {
	// Required: Text summary of the issue or notice.
	Summary string `protobuf:"bytes,1,opt,name=summary" yaml:"summary,omitempty"`
	// Optional: Link to further information, such as a bug, email, document, etc.
	ContextLink string `protobuf:"bytes,2,opt,name=context_link,json=contextLink" yaml:"context_link,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Specifies a group of tests to gather.
type TestGroup struct {
	// Name of this TestGroup, for mapping dashboard tabs to tests.
	Name string `protobuf:"bytes,1,opt,name=name" yaml:"name,omitempty"`
	// Path to the test result stored in gcs
	GcsPrefix string `protobuf:"bytes,2,opt,name=gcs_prefix,json=gcsPrefix" yaml:"gcs_prefix,omitempty"`
	// Number of days of test results to gather and serve.
	DaysOfResults int32 `protobuf:"varint,3,opt,name=days_of_results,json=daysOfResults" yaml:"days_of_results,omitempty"`
	// What to do with the 'Tests name' configuration value. It can replace the
	// name of the test, be appended to the name of the test, or ignored. If it is
	// ignored, then the name of the tests will be the build target.
	TestsNamePolicy TestGroup_TestsName       `protobuf:"varint,6,opt,name=tests_name_policy,json=testsNamePolicy,enum=TestGroup_TestsName" yaml:"tests_name_policy,omitempty"`
	ColumnHeader    []*TestGroup_ColumnHeader `protobuf:"bytes,9,rep,name=column_header,json=columnHeader" yaml:"column_header,omitempty"`
	// deprecated - do not touch
	AlertStateResultsHours int32 `protobuf:"varint,11,opt,name=alert_state_results_hours,json=alertStateResultsHours" yaml:"alert_state_results_hours,omitempty"`
	// deprecated - always set to true
	UseKubernetesClient bool `protobuf:"varint,24,opt,name=use_kubernetes_client,json=useKubernetesClient" yaml:"use_kubernetes_client,omitempty"`
	// deprecated - always set to true
	IsExternal bool `protobuf:"varint,25,opt,name=is_external,json=isExternal" yaml:"is_external,omitempty"`
	// Specifies the test name for a test.
	TestNameConfig *TestNameConfig `protobuf:"bytes,26,opt,name=test_name_config,json=testNameConfig" yaml:"test_name_config,omitempty"`
	// A list of notifications attached to this test group.
	// This is displayed on any dashboard tab backed by this test group.
	Notifications []*Notification `protobuf:"bytes,27,rep,name=notifications" yaml:"notifications,omitempty"`
}

func (m *TestGroup) Reset()                    { *m = TestGroup{} }
func (m *TestGroup) String() string            { return proto.CompactTextString(m) }
func (*TestGroup) ProtoMessage()               {}
func (*TestGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TestGroup) GetColumnHeader() []*TestGroup_ColumnHeader {
	if m != nil {
		return m.ColumnHeader
	}
	return nil
}

func (m *TestGroup) GetTestNameConfig() *TestNameConfig {
	if m != nil {
		return m.TestNameConfig
	}
	return nil
}

func (m *TestGroup) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

// Custom column headers for defining extra column-heading rows from values in
// the test result.
type TestGroup_ColumnHeader struct {
	ConfigurationValue string `protobuf:"bytes,3,opt,name=configuration_value,json=configurationValue" yaml:"configuration_value,omitempty"`
}

func (m *TestGroup_ColumnHeader) Reset()                    { *m = TestGroup_ColumnHeader{} }
func (m *TestGroup_ColumnHeader) String() string            { return proto.CompactTextString(m) }
func (*TestGroup_ColumnHeader) ProtoMessage()               {}
func (*TestGroup_ColumnHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Specifies a dashboard.
type Dashboard struct {
	// A list of the tabs on the dashboard.
	DashboardTab []*DashboardTab `protobuf:"bytes,1,rep,name=dashboard_tab,json=dashboardTab" yaml:"dashboard_tab,omitempty"`
	// A name for the Dashboard.
	Name string `protobuf:"bytes,2,opt,name=name" yaml:"name,omitempty"`
	// A list of notifications attached to this dashboard.
	// This is displayed on any dashboard tab in this dashboard.
	Notifications []*Notification `protobuf:"bytes,3,rep,name=notifications" yaml:"notifications,omitempty"`
}

func (m *Dashboard) Reset()                    { *m = Dashboard{} }
func (m *Dashboard) String() string            { return proto.CompactTextString(m) }
func (*Dashboard) ProtoMessage()               {}
func (*Dashboard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Dashboard) GetDashboardTab() []*DashboardTab {
	if m != nil {
		return m.DashboardTab
	}
	return nil
}

func (m *Dashboard) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type LinkTemplate struct {
	// The URL template.
	Url string `protobuf:"bytes,1,opt,name=url" yaml:"url,omitempty"`
	// The options templates.
	Options []*LinkOptionsTemplate `protobuf:"bytes,2,rep,name=options" yaml:"options,omitempty"`
}

func (m *LinkTemplate) Reset()                    { *m = LinkTemplate{} }
func (m *LinkTemplate) String() string            { return proto.CompactTextString(m) }
func (*LinkTemplate) ProtoMessage()               {}
func (*LinkTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LinkTemplate) GetOptions() []*LinkOptionsTemplate {
	if m != nil {
		return m.Options
	}
	return nil
}

// A simple key/value pair for link options.
type LinkOptionsTemplate struct {
	// The key for the option. This is not expanded.
	Key string `protobuf:"bytes,1,opt,name=key" yaml:"key,omitempty"`
	// The value for the option. This is expanded the same as the LinkTemplate.
	Value string `protobuf:"bytes,2,opt,name=value" yaml:"value,omitempty"`
}

func (m *LinkOptionsTemplate) Reset()                    { *m = LinkOptionsTemplate{} }
func (m *LinkOptionsTemplate) String() string            { return proto.CompactTextString(m) }
func (*LinkOptionsTemplate) ProtoMessage()               {}
func (*LinkOptionsTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// A single tab on a dashboard.
type DashboardTab struct {
	// The name of the dashboard tab to display in the client.
	Name string `protobuf:"bytes,1,opt,name=name" yaml:"name,omitempty"`
	// The name of the TestGroup specifying the test results for this tab.
	TestGroupName string `protobuf:"bytes,2,opt,name=test_group_name,json=testGroupName" yaml:"test_group_name,omitempty"`
	// Default bug component for manually filing bugs from the dashboard
	BugComponent int32 `protobuf:"varint,3,opt,name=bug_component,json=bugComponent" yaml:"bug_component,omitempty"`
	// Default code search path for changelist search links
	CodeSearchPath string `protobuf:"bytes,4,opt,name=code_search_path,json=codeSearchPath" yaml:"code_search_path,omitempty"`
	// Base options to always include, for example:
	// width=20&include-filter-by-regex=level_tests
	// This is taken from the #fragment part of the testgrid url.
	// Best way to create these is to setup the options on testgrid and then
	// copy the #fragment part.
	BaseOptions string `protobuf:"bytes,6,opt,name=base_options,json=baseOptions" yaml:"base_options,omitempty"`
	// The URL template to visit after clicking on a cell.
	OpenTestTemplate *LinkTemplate `protobuf:"bytes,7,opt,name=open_test_template,json=openTestTemplate" yaml:"open_test_template,omitempty"`
	// The URL template to visit when filing a bug.
	FileBugTemplate *LinkTemplate `protobuf:"bytes,8,opt,name=file_bug_template,json=fileBugTemplate" yaml:"file_bug_template,omitempty"`
	// The URL template to visit when attaching a bug
	AttachBugTemplate *LinkTemplate `protobuf:"bytes,9,opt,name=attach_bug_template,json=attachBugTemplate" yaml:"attach_bug_template,omitempty"`
	// Text to show in the about menu as a link to another view of the results.
	ResultsText string `protobuf:"bytes,10,opt,name=results_text,json=resultsText" yaml:"results_text,omitempty"`
	// The URL template to visit after clicking.
	ResultsUrlTemplate *LinkTemplate `protobuf:"bytes,11,opt,name=results_url_template,json=resultsUrlTemplate" yaml:"results_url_template,omitempty"`
	// The URL template to visit when searching for changelists.
	CodeSearchUrlTemplate *LinkTemplate `protobuf:"bytes,12,opt,name=code_search_url_template,json=codeSearchUrlTemplate" yaml:"code_search_url_template,omitempty"`
	// A description paragraph to be displayed.
	Description string `protobuf:"bytes,13,opt,name=description" yaml:"description,omitempty"`
}

func (m *DashboardTab) Reset()                    { *m = DashboardTab{} }
func (m *DashboardTab) String() string            { return proto.CompactTextString(m) }
func (*DashboardTab) ProtoMessage()               {}
func (*DashboardTab) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DashboardTab) GetOpenTestTemplate() *LinkTemplate {
	if m != nil {
		return m.OpenTestTemplate
	}
	return nil
}

func (m *DashboardTab) GetFileBugTemplate() *LinkTemplate {
	if m != nil {
		return m.FileBugTemplate
	}
	return nil
}

func (m *DashboardTab) GetAttachBugTemplate() *LinkTemplate {
	if m != nil {
		return m.AttachBugTemplate
	}
	return nil
}

func (m *DashboardTab) GetResultsUrlTemplate() *LinkTemplate {
	if m != nil {
		return m.ResultsUrlTemplate
	}
	return nil
}

func (m *DashboardTab) GetCodeSearchUrlTemplate() *LinkTemplate {
	if m != nil {
		return m.CodeSearchUrlTemplate
	}
	return nil
}

// Specifies a dashboard group.
type DashboardGroup struct {
	// The name for the dashboard group.
	Name string `protobuf:"bytes,1,opt,name=name" yaml:"name,omitempty"`
	// A list of names specifying dashboards to show links to in a separate tabbed
	// bar at the top of the page for each of the given dashboards.
	DashboardNames []string `protobuf:"bytes,2,rep,name=dashboard_names,json=dashboardNames" yaml:"dashboard_names,omitempty"`
}

func (m *DashboardGroup) Reset()                    { *m = DashboardGroup{} }
func (m *DashboardGroup) String() string            { return proto.CompactTextString(m) }
func (*DashboardGroup) ProtoMessage()               {}
func (*DashboardGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// A service configuration consisting of multiple test groups and dashboards.
type Configuration struct {
	// A list of groups of tests to gather.
	TestGroups []*TestGroup `protobuf:"bytes,1,rep,name=test_groups,json=testGroups" yaml:"test_groups,omitempty"`
	// A list of all of the dashboards for a server.
	Dashboards []*Dashboard `protobuf:"bytes,2,rep,name=dashboards" yaml:"dashboards,omitempty"`
	// A list of all the dashboard groups for a server.
	DashboardGroups []*DashboardGroup `protobuf:"bytes,3,rep,name=dashboard_groups,json=dashboardGroups" yaml:"dashboard_groups,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Configuration) GetTestGroups() []*TestGroup {
	if m != nil {
		return m.TestGroups
	}
	return nil
}

func (m *Configuration) GetDashboards() []*Dashboard {
	if m != nil {
		return m.Dashboards
	}
	return nil
}

func (m *Configuration) GetDashboardGroups() []*DashboardGroup {
	if m != nil {
		return m.DashboardGroups
	}
	return nil
}

type DefaultConfiguration struct {
	// A default testgroup with default initialization data
	DefaultTestGroup *TestGroup `protobuf:"bytes,1,opt,name=default_test_group,json=defaultTestGroup" yaml:"default_test_group,omitempty"`
	// A default dashboard with default initialization data
	DefaultDashboardTab *DashboardTab `protobuf:"bytes,2,opt,name=default_dashboard_tab,json=defaultDashboardTab" yaml:"default_dashboard_tab,omitempty"`
}

func (m *DefaultConfiguration) Reset()                    { *m = DefaultConfiguration{} }
func (m *DefaultConfiguration) String() string            { return proto.CompactTextString(m) }
func (*DefaultConfiguration) ProtoMessage()               {}
func (*DefaultConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DefaultConfiguration) GetDefaultTestGroup() *TestGroup {
	if m != nil {
		return m.DefaultTestGroup
	}
	return nil
}

func (m *DefaultConfiguration) GetDefaultDashboardTab() *DashboardTab {
	if m != nil {
		return m.DefaultDashboardTab
	}
	return nil
}

func init() {
	proto.RegisterType((*TestNameConfig)(nil), "TestNameConfig")
	proto.RegisterType((*TestNameConfig_NameElement)(nil), "TestNameConfig.NameElement")
	proto.RegisterType((*Notification)(nil), "Notification")
	proto.RegisterType((*TestGroup)(nil), "TestGroup")
	proto.RegisterType((*TestGroup_ColumnHeader)(nil), "TestGroup.ColumnHeader")
	proto.RegisterType((*Dashboard)(nil), "Dashboard")
	proto.RegisterType((*LinkTemplate)(nil), "LinkTemplate")
	proto.RegisterType((*LinkOptionsTemplate)(nil), "LinkOptionsTemplate")
	proto.RegisterType((*DashboardTab)(nil), "DashboardTab")
	proto.RegisterType((*DashboardGroup)(nil), "DashboardGroup")
	proto.RegisterType((*Configuration)(nil), "Configuration")
	proto.RegisterType((*DefaultConfiguration)(nil), "DefaultConfiguration")
	proto.RegisterEnum("TestGroup_TestsName", TestGroup_TestsName_name, TestGroup_TestsName_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0x89, 0xdb, 0x3a, 0x13, 0x3b, 0x75, 0xb7, 0xed, 0xe1, 0xbb, 0x03, 0x91, 0xf3, 0x49,
	0x47, 0x04, 0x52, 0x90, 0x7a, 0x2f, 0x14, 0x38, 0x71, 0x25, 0xcd, 0xfd, 0x49, 0xaf, 0x69, 0xe4,
	0x06, 0x5e, 0x57, 0x1b, 0x67, 0x93, 0x58, 0x75, 0xec, 0xc8, 0xbb, 0x46, 0xed, 0x37, 0xe0, 0x9d,
	0xaf, 0xc0, 0x97, 0xe0, 0x1d, 0x89, 0xaf, 0x85, 0x76, 0xd7, 0x76, 0xd6, 0x47, 0x10, 0x6f, 0xbb,
	0xbf, 0xf9, 0xcd, 0xec, 0xcc, 0xec, 0xfc, 0xd6, 0x06, 0x3b, 0x4c, 0x93, 0x45, 0xb4, 0xec, 0x6f,
	0xb2, 0x94, 0xa7, 0xfe, 0x9f, 0x06, 0x74, 0xa6, 0x94, 0xf1, 0x31, 0x59, 0xd3, 0x81, 0x34, 0xa0,
	0xd7, 0xe0, 0x24, 0x64, 0x4d, 0x31, 0x8d, 0xe9, 0x9a, 0x26, 0x9c, 0x79, 0x46, 0xb7, 0xd9, 0x6b,
	0x9f, 0x3d, 0xed, 0xd7, 0x79, 0x7d, 0xb1, 0x1c, 0x2a, 0x4e, 0x60, 0x27, 0xdb, 0x0d, 0x43, 0x5f,
	0x40, 0x5b, 0x46, 0x58, 0xa4, 0xd9, 0x9a, 0x70, 0xaf, 0xd1, 0x35, 0x7a, 0xad, 0x00, 0x04, 0xf4,
	0x46, 0x22, 0x4f, 0x2e, 0xa1, 0xad, 0x79, 0xa3, 0xe7, 0xe0, 0x70, 0x92, 0x2d, 0x29, 0xc7, 0x2a,
	0xb7, 0xc2, 0xc3, 0x56, 0xa0, 0x3a, 0x6e, 0x64, 0x5a, 0x86, 0xdb, 0x18, 0x99, 0x56, 0xd3, 0x35,
	0x47, 0xa6, 0x65, 0xba, 0x7b, 0xfe, 0x15, 0xd8, 0xe3, 0x94, 0x47, 0x8b, 0x28, 0x24, 0x3c, 0x4a,
	0x13, 0xe4, 0xc1, 0x01, 0xcb, 0xd7, 0x6b, 0x92, 0x3d, 0x78, 0x86, 0x0c, 0x50, 0x6e, 0xd1, 0x33,
	0x59, 0x35, 0xa7, 0xf7, 0x1c, 0xc7, 0x51, 0x72, 0x57, 0xc4, 0x6f, 0x17, 0xd8, 0x87, 0x28, 0xb9,
	0xf3, 0xff, 0xda, 0x83, 0x96, 0x28, 0xf0, 0x6d, 0x96, 0xe6, 0x1b, 0x84, 0xc0, 0x14, 0xe9, 0x16,
	0x71, 0xe4, 0x1a, 0x7d, 0x0e, 0xb0, 0x0c, 0x19, 0xde, 0x64, 0x74, 0x11, 0xdd, 0x17, 0x21, 0x5a,
	0xcb, 0x90, 0x4d, 0x24, 0x80, 0x5e, 0xc0, 0xe1, 0x9c, 0x3c, 0x30, 0x9c, 0x2e, 0x70, 0x46, 0x59,
	0x1e, 0x73, 0xe6, 0x35, 0xbb, 0x46, 0x6f, 0x2f, 0x70, 0x04, 0x7c, 0xb3, 0x08, 0x14, 0x88, 0x5e,
	0xc3, 0x11, 0xa7, 0x8c, 0x33, 0x2c, 0x5b, 0xb4, 0x49, 0xe3, 0x28, 0x7c, 0xf0, 0xf6, 0xbb, 0x46,
	0xaf, 0x73, 0x76, 0xd2, 0xaf, 0x32, 0x90, 0x2b, 0x26, 0x9a, 0x14, 0x1c, 0xf2, 0x72, 0x39, 0x91,
	0x64, 0xf4, 0x03, 0x38, 0x61, 0x1a, 0xe7, 0xeb, 0x04, 0xaf, 0x28, 0x99, 0xd3, 0xcc, 0x6b, 0xc9,
	0x0b, 0xfa, 0x54, 0xf3, 0x1e, 0x48, 0xfb, 0x3b, 0x69, 0x0e, 0xec, 0x50, 0xdb, 0xa1, 0x73, 0x78,
	0x4c, 0x62, 0x9a, 0x71, 0xcc, 0x38, 0xe1, 0xb4, 0xcc, 0x15, 0xaf, 0xd2, 0x3c, 0x63, 0x5e, 0x5b,
	0x66, 0xfc, 0x48, 0x12, 0x6e, 0x85, 0xbd, 0xc8, 0xfa, 0x9d, 0xb0, 0xa2, 0x33, 0x38, 0xcd, 0x19,
	0xc5, 0x77, 0xf9, 0x8c, 0x66, 0x09, 0xe5, 0x94, 0xe1, 0x30, 0x8e, 0x68, 0xc2, 0x3d, 0xaf, 0x6b,
	0xf4, 0xac, 0xe0, 0x38, 0x67, 0xf4, 0xaa, 0xb2, 0x0d, 0xa4, 0x49, 0xcc, 0x42, 0xc4, 0x30, 0xbd,
	0xe7, 0x34, 0x4b, 0x48, 0xec, 0x3d, 0x96, 0x4c, 0x88, 0xd8, 0xb0, 0x40, 0xd0, 0x39, 0xb8, 0xa2,
	0x40, 0xd5, 0x8e, 0xe2, 0xfe, 0x9f, 0x74, 0x8d, 0x5e, 0xfb, 0xec, 0xf0, 0xa3, 0x89, 0x0b, 0x3a,
	0xbc, 0x3e, 0xa9, 0x2f, 0xc1, 0x49, 0xb4, 0x01, 0x60, 0xde, 0x53, 0xd9, 0x08, 0xa7, 0xaf, 0x8f,
	0x45, 0x50, 0xe7, 0x3c, 0xb9, 0x02, 0x5b, 0xef, 0x0e, 0xfa, 0x06, 0x8e, 0xd5, 0xa9, 0x79, 0x26,
	0x19, 0xf8, 0x57, 0x12, 0xe7, 0x54, 0xde, 0x5d, 0x2b, 0x40, 0x35, 0xd3, 0x2f, 0xc2, 0x52, 0x0d,
	0x62, 0xc3, 0x6d, 0xfa, 0x54, 0x0d, 0x8d, 0xbc, 0x1d, 0x84, 0xa0, 0x33, 0x1d, 0xde, 0x4e, 0x6f,
	0xf1, 0xf8, 0xe2, 0x7a, 0x88, 0xaf, 0xdf, 0x8f, 0xdd, 0x4f, 0xd0, 0x29, 0x1c, 0x69, 0xd8, 0xfb,
	0xb7, 0xe3, 0x9b, 0x60, 0xe8, 0x1a, 0xe8, 0x11, 0x20, 0x0d, 0x0e, 0x86, 0x93, 0x0f, 0x17, 0x83,
	0xa1, 0xdb, 0xf8, 0x88, 0x7e, 0x31, 0x99, 0x0c, 0xc7, 0x97, 0x6e, 0x53, 0xcd, 0xfb, 0xc8, 0xb4,
	0xf6, 0xdc, 0xfd, 0x91, 0x69, 0x1d, 0xb8, 0xd6, 0xc8, 0xb4, 0x2c, 0xb7, 0x35, 0x32, 0x2d, 0x70,
	0xdb, 0x23, 0xd3, 0xb2, 0x5d, 0x6f, 0x64, 0x5a, 0x9f, 0xb9, 0x5d, 0xff, 0x37, 0x03, 0x5a, 0x97,
	0x84, 0xad, 0x66, 0x29, 0xc9, 0xe6, 0xe8, 0x0c, 0x9c, 0x79, 0xb9, 0xc1, 0x9c, 0xcc, 0x0a, 0x29,
	0x3b, 0xfd, 0x8a, 0x32, 0x25, 0xb3, 0xc0, 0x9e, 0x6b, 0xbb, 0x6a, 0xf4, 0x1b, 0xda, 0xe8, 0xff,
	0xab, 0xd1, 0xcd, 0xff, 0x6f, 0xb4, 0x3f, 0x01, 0x5b, 0x28, 0x6b, 0x4a, 0xd7, 0x9b, 0x98, 0x70,
	0x8a, 0x5c, 0x68, 0xe6, 0x59, 0x5c, 0x48, 0x4a, 0x2c, 0x51, 0x1f, 0x0e, 0xd2, 0x8d, 0x0a, 0xd8,
	0x90, 0x01, 0x4f, 0xfa, 0xc2, 0xe3, 0x46, 0x61, 0xa5, 0x63, 0x50, 0x92, 0xfc, 0x57, 0x70, 0xbc,
	0xc3, 0x2e, 0x02, 0xdf, 0xd1, 0x52, 0xf3, 0x62, 0x89, 0x4e, 0x60, 0x4f, 0xdd, 0xa2, 0x2a, 0x42,
	0x6d, 0xfc, 0xbf, 0x4d, 0xb0, 0x2f, 0x77, 0x95, 0xaa, 0xab, 0xfc, 0x05, 0x48, 0xbd, 0xe1, 0xa5,
	0xd0, 0x11, 0xd6, 0x3a, 0xe1, 0xf0, 0x52, 0x5d, 0xf2, 0xb2, 0x9f, 0x83, 0x33, 0xcb, 0x97, 0x38,
	0x4c, 0xd7, 0x9b, 0x34, 0x11, 0x1a, 0x50, 0x62, 0xb7, 0x67, 0xf9, 0x72, 0x50, 0x62, 0xa8, 0x07,
	0x6e, 0x98, 0xce, 0x29, 0x66, 0x94, 0x64, 0xe1, 0x0a, 0x6f, 0x08, 0x5f, 0x79, 0xa6, 0x8c, 0xd6,
	0x11, 0xf8, 0xad, 0x84, 0x27, 0x84, 0xaf, 0xc4, 0x0b, 0x35, 0x23, 0x8c, 0xe2, 0xb2, 0x1f, 0xfb,
	0xea, 0x85, 0x12, 0x58, 0x51, 0x2e, 0xfa, 0x1e, 0x50, 0xba, 0xa1, 0x09, 0x96, 0xe9, 0xf1, 0xa2,
	0x78, 0xef, 0x40, 0x4a, 0xc5, 0xe9, 0xeb, 0xad, 0x0e, 0x5c, 0x41, 0x14, 0x83, 0x59, 0xf5, 0xe8,
	0x1c, 0x8e, 0x16, 0x51, 0x4c, 0xb1, 0xc8, 0xb9, 0xf2, 0xb5, 0x76, 0xf9, 0x1e, 0x0a, 0xde, 0x4f,
	0xf9, 0xb2, 0x72, 0x7d, 0x05, 0xc7, 0x84, 0x73, 0x12, 0xae, 0xea, 0xce, 0xad, 0x5d, 0xce, 0x47,
	0x8a, 0xa9, 0xbb, 0x3f, 0x03, 0xbb, 0x7c, 0x63, 0xc4, 0x63, 0xeb, 0x81, 0xaa, 0xac, 0xc0, 0xa6,
	0xf4, 0x9e, 0xa3, 0x1f, 0xe1, 0xa4, 0xa4, 0xe4, 0x59, 0xbc, 0x3d, 0xa2, 0xbd, 0xeb, 0x08, 0x54,
	0x50, 0x7f, 0xce, 0xe2, 0xea, 0x8c, 0x37, 0xe0, 0xe9, 0x7d, 0xae, 0x05, 0xb1, 0x77, 0x05, 0x39,
	0xdd, 0xb6, 0x5f, 0x8f, 0xd3, 0x85, 0xf6, 0x9c, 0xb2, 0x30, 0x8b, 0x64, 0xcb, 0x3d, 0x47, 0xa5,
	0xaa, 0x41, 0x4a, 0x83, 0xfe, 0x35, 0x74, 0xaa, 0x41, 0xfa, 0xef, 0x0f, 0xc6, 0x97, 0xe2, 0x8b,
	0x50, 0xaa, 0x4f, 0x20, 0x6a, 0xcc, 0x5b, 0x41, 0xa7, 0x82, 0xc5, 0x28, 0x31, 0xff, 0x0f, 0x03,
	0x9c, 0x81, 0xfe, 0xd0, 0xa0, 0xaf, 0xa1, 0xbd, 0x9d, 0xc2, 0xf2, 0x0b, 0x0c, 0xdb, 0x07, 0x3e,
	0x80, 0x6a, 0x1a, 0x19, 0xfa, 0x0a, 0xa0, 0x0a, 0x58, 0x2a, 0x09, 0xb6, 0x12, 0x0f, 0x34, 0x2b,
	0xfa, 0x0e, 0xdc, 0x6d, 0x4e, 0x45, 0x74, 0x25, 0xe6, 0xc3, 0x7e, 0xbd, 0xa4, 0x60, 0x9b, 0xbc,
	0x3a, 0xc7, 0xff, 0xdd, 0x80, 0x93, 0x4b, 0xba, 0x20, 0x79, 0xcc, 0xeb, 0xd9, 0x7e, 0x0b, 0x68,
	0xae, 0x70, 0xbc, 0xcd, 0x5a, 0xb6, 0xa2, 0x9e, 0xb4, 0x5b, 0xb0, 0xb6, 0xdf, 0xd9, 0x0b, 0x38,
	0x2d, 0x3d, 0xeb, 0x0f, 0x55, 0xa3, 0xb8, 0xb5, 0xda, 0x43, 0x75, 0x5c, 0x70, 0x75, 0x70, 0xb6,
	0x2f, 0x7f, 0x64, 0x5e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x72, 0x39, 0x47, 0xdd, 0xd8, 0x08,
	0x00, 0x00,
}
