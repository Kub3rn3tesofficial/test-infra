// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	TestGroup
	TestNameConfig
	Dashboard
	LinkTemplate
	LinkOptionsTemplate
	DashboardTab
	SingleConfiguration
	AllDashboards
	Configuration
	UpdateRequest
	UpdateResponse
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Note: Changes to this enumeration should be reflected in testgrid.gcl.
type TestGroup_TestsName int32

const (
	TestGroup_TESTS_NAME_IGNORE  TestGroup_TestsName = 1
	TestGroup_TESTS_NAME_REPLACE TestGroup_TestsName = 2
	TestGroup_TESTS_NAME_APPEND  TestGroup_TestsName = 3
)

var TestGroup_TestsName_name = map[int32]string{
	1: "TESTS_NAME_IGNORE",
	2: "TESTS_NAME_REPLACE",
	3: "TESTS_NAME_APPEND",
}
var TestGroup_TestsName_value = map[string]int32{
	"TESTS_NAME_IGNORE":  1,
	"TESTS_NAME_REPLACE": 2,
	"TESTS_NAME_APPEND":  3,
}

func (x TestGroup_TestsName) Enum() *TestGroup_TestsName {
	p := new(TestGroup_TestsName)
	*p = x
	return p
}
func (x TestGroup_TestsName) String() string {
	return proto.EnumName(TestGroup_TestsName_name, int32(x))
}
func (x *TestGroup_TestsName) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestGroup_TestsName_value, data, "TestGroup_TestsName")
	if err != nil {
		return err
	}
	*x = TestGroup_TestsName(value)
	return nil
}
func (TestGroup_TestsName) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Note: Changes to this enumeration should be reflected in testgrid.gcl.
type TestGroup_FallbackGrouping int32

const (
	TestGroup_FALLBACK_GROUPING_NONE   TestGroup_FallbackGrouping = 0
	TestGroup_FALLBACK_GROUPING_DATE   TestGroup_FallbackGrouping = 1
	TestGroup_FALLBACK_GROUPING_LABELS TestGroup_FallbackGrouping = 2
	TestGroup_FALLBACK_GROUPING_ID     TestGroup_FallbackGrouping = 3
)

var TestGroup_FallbackGrouping_name = map[int32]string{
	0: "FALLBACK_GROUPING_NONE",
	1: "FALLBACK_GROUPING_DATE",
	2: "FALLBACK_GROUPING_LABELS",
	3: "FALLBACK_GROUPING_ID",
}
var TestGroup_FallbackGrouping_value = map[string]int32{
	"FALLBACK_GROUPING_NONE":   0,
	"FALLBACK_GROUPING_DATE":   1,
	"FALLBACK_GROUPING_LABELS": 2,
	"FALLBACK_GROUPING_ID":     3,
}

func (x TestGroup_FallbackGrouping) Enum() *TestGroup_FallbackGrouping {
	p := new(TestGroup_FallbackGrouping)
	*p = x
	return p
}
func (x TestGroup_FallbackGrouping) String() string {
	return proto.EnumName(TestGroup_FallbackGrouping_name, int32(x))
}
func (x *TestGroup_FallbackGrouping) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestGroup_FallbackGrouping_value, data, "TestGroup_FallbackGrouping")
	if err != nil {
		return err
	}
	*x = TestGroup_FallbackGrouping(value)
	return nil
}
func (TestGroup_FallbackGrouping) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

// Specifies a group of tests to gather.
type TestGroup struct {
	// Name of this TestGroup, for mapping dashboard tabs to tests.
	Name *string `protobuf:"bytes,1,opt,name=name" yaml:"name,omitempty"`
	// A specification of a set of test results by a Sponge query as defined by
	// http://sponge.  For Guitar continuous builds, add the following to your
	// query: "label:guitar label:cbuild label:overview."
	Query *string `protobuf:"bytes,2,opt,name=query" yaml:"query,omitempty"`
	// Number of days of test results to gather and serve.
	DaysOfResults *int32 `protobuf:"varint,3,opt,name=days_of_results,def=30" yaml:"days_of_results,omitempty"`
	// Whether to ignore test results with the status PENDING.  Ignoring pending
	// test results is recommended because the result may not be associated with
	// a test name, and pending test results are not always cleaned up on retries.
	IgnorePending *bool `protobuf:"varint,4,opt,name=ignore_pending,def=1" yaml:"ignore_pending,omitempty"`
	// Whether to ignore test results with the status BUILT.  Ignoring built test
	// results is recommended because the result is likely related to tooling
	// associated with running the tests.
	IgnoreBuilt *bool `protobuf:"varint,5,opt,name=ignore_built,def=1" yaml:"ignore_built,omitempty"`
	// What to do with the 'Tests name' configuration value. It can replace the
	// name of the test, be appended to the name of the test, or ignored. If it is
	// ignored, then the name of the tests will be the build target.
	// TODO(kenbayer): Consider making this generic, so that any configuration
	// value can replace or be appended to the test name.
	TestsNamePolicy *TestGroup_TestsName `protobuf:"varint,6,opt,name=tests_name_policy,enum=TestGroup_TestsName,def=1" yaml:"tests_name_policy,omitempty"`
	// Whether to gather the test properties from Sponge.
	GatherTestProperties *bool `protobuf:"varint,7,opt,name=gather_test_properties,def=0" yaml:"gather_test_properties,omitempty"`
	// Substrings to use to ignore test results. Tests with names that include
	// these substrings will be removed from the table.
	IgnoreTestSubstring []string                  `protobuf:"bytes,8,rep,name=ignore_test_substring" yaml:"ignore_test_substring,omitempty"`
	ColumnHeader        []*TestGroup_ColumnHeader `protobuf:"bytes,9,rep,name=column_header" yaml:"column_header,omitempty,flow"`
	// A fallback grouping strategy for grouping test results in columns.
	FallbackGrouping *TestGroup_FallbackGrouping `protobuf:"varint,10,opt,name=fallback_grouping,enum=TestGroup_FallbackGrouping,def=0" yaml:"fallback_grouping,omitempty"`
	// Time in hours before an alert will be added to a test results table if the
	// run date of the latest results are older than this time.  If zero, no
	// alerts are raised.
	AlertStaleResultsHours *int32 `protobuf:"varint,11,opt,name=alert_stale_results_hours,def=0" yaml:"alert_stale_results_hours,omitempty"`
	// The number of consecutive test result failures to see before alerting of
	// a consistent failure. If zero, no alerts are raised.
	NumFailuresToAlert *int32 `protobuf:"varint,12,opt,name=num_failures_to_alert,def=3" yaml:"num_failures_to_alert,omitempty"`
	// Default bug component for automatically filing bugs.
	BugComponent *int32 `protobuf:"varint,13,opt,name=bug_component,def=0" yaml:"bug_component,omitempty"`
	// Default code search path for changelist search links.
	CodeSearchPath *string `protobuf:"bytes,14,opt,name=code_search_path,def=" yaml:"code_search_path,omitempty"`
	// The number of columns to consider "recent" for a variety of purposes,
	// including eliding tests with stale results, raising alerts, sending mail,
	// opening bugs, and summarizing the test data.
	NumColumnsRecent *int32 `protobuf:"varint,15,opt,name=num_columns_recent,def=5" yaml:"num_columns_recent,omitempty"`
	// Whether to read the TEST_METADATA files for the test targets. Information
	// from the test metadata is sent to the client to allow it to open bugs
	// in specific components for some tests.
	UseTestMetadata *bool `protobuf:"varint,16,opt,name=use_test_metadata,def=0" yaml:"use_test_metadata,omitempty"`
	// The comma-separated addresses to send mail.
	AlertMailToAddresses *string `protobuf:"bytes,17,opt,name=alert_mail_to_addresses,def=" yaml:"alert_mail_to_addresses,omitempty"`
	// Subject line of an alert mail.
	AlertMailSubject *string `protobuf:"bytes,18,opt,name=alert_mail_subject,def=" yaml:"alert_mail_subject,omitempty"`
	// Failure message on mail.
	AlertMailFailureMessage *string `protobuf:"bytes,19,opt,name=alert_mail_failure_message,def=" yaml:"alert_mail_failure_message,omitempty"`
	// An url which will help in debugging failure. This will be hyperlinked on
	// failure message.
	AlertMailDebugUrl *string `protobuf:"bytes,20,opt,name=alert_mail_debug_url,def=" yaml:"alert_mail_debug_url,omitempty"`
	// Minimum time between sending mails.
	MinElapsedMinutesBetweenMails *int32 `protobuf:"varint,21,opt,name=min_elapsed_minutes_between_mails,def=60" yaml:"min_elapsed_minutes_between_mails,omitempty"`
	// Whether to read configuration values from invocation and use that as
	// params to send email alerts. If this is true, values for
	// alert_mail_to_addresses, alert_mail_failure_message and
	// alert_mail_debug_url will be gathered from invocation properties and will
	// get precedence.
	UseConfigurationValuesAsAlertParams *bool `protobuf:"varint,22,opt,name=use_configuration_values_as_alert_params,def=0" yaml:"use_configuration_values_as_alert_params,omitempty"`
	// Whether to treat a combination of passes and failures within one test as a
	// flaky status.
	EnableFlakyStatus *bool `protobuf:"varint,23,opt,name=enable_flaky_status,def=0" yaml:"enable_flaky_status,omitempty"`
	// Whether to use the kubernetes client instead of the sponge client.
	UseKubernetesClient *bool `protobuf:"varint,24,opt,name=use_kubernetes_client,def=0" yaml:"use_kubernetes_client,omitempty"`
	// Whether the test group should be made visible in external TestGrid.
	// The group must be defined in the configs/external directory.
	IsExternal *bool `protobuf:"varint,25,opt,name=is_external,def=0" yaml:"is_external,omitempty"`
	// Specifies the test name for a test.
	TestNameConfig   *TestNameConfig `protobuf:"bytes,26,opt,name=test_name_config" yaml:"test_name_config,omitempty"`
	XXX_unrecognized []byte          `yaml:"-"`
}

func (m *TestGroup) Reset()                    { *m = TestGroup{} }
func (m *TestGroup) String() string            { return proto.CompactTextString(m) }
func (*TestGroup) ProtoMessage()               {}
func (*TestGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_TestGroup_DaysOfResults int32 = 30
const Default_TestGroup_IgnorePending bool = true
const Default_TestGroup_IgnoreBuilt bool = true
const Default_TestGroup_TestsNamePolicy TestGroup_TestsName = TestGroup_TESTS_NAME_IGNORE
const Default_TestGroup_GatherTestProperties bool = false
const Default_TestGroup_FallbackGrouping TestGroup_FallbackGrouping = TestGroup_FALLBACK_GROUPING_NONE
const Default_TestGroup_AlertStaleResultsHours int32 = 0
const Default_TestGroup_NumFailuresToAlert int32 = 3
const Default_TestGroup_BugComponent int32 = 0
const Default_TestGroup_NumColumnsRecent int32 = 5
const Default_TestGroup_UseTestMetadata bool = false
const Default_TestGroup_MinElapsedMinutesBetweenMails int32 = 60
const Default_TestGroup_UseConfigurationValuesAsAlertParams bool = false
const Default_TestGroup_EnableFlakyStatus bool = false
const Default_TestGroup_UseKubernetesClient bool = false
const Default_TestGroup_IsExternal bool = false

func (m *TestGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TestGroup) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *TestGroup) GetDaysOfResults() int32 {
	if m != nil && m.DaysOfResults != nil {
		return *m.DaysOfResults
	}
	return Default_TestGroup_DaysOfResults
}

func (m *TestGroup) GetIgnorePending() bool {
	if m != nil && m.IgnorePending != nil {
		return *m.IgnorePending
	}
	return Default_TestGroup_IgnorePending
}

func (m *TestGroup) GetIgnoreBuilt() bool {
	if m != nil && m.IgnoreBuilt != nil {
		return *m.IgnoreBuilt
	}
	return Default_TestGroup_IgnoreBuilt
}

func (m *TestGroup) GetTestsNamePolicy() TestGroup_TestsName {
	if m != nil && m.TestsNamePolicy != nil {
		return *m.TestsNamePolicy
	}
	return Default_TestGroup_TestsNamePolicy
}

func (m *TestGroup) GetGatherTestProperties() bool {
	if m != nil && m.GatherTestProperties != nil {
		return *m.GatherTestProperties
	}
	return Default_TestGroup_GatherTestProperties
}

func (m *TestGroup) GetIgnoreTestSubstring() []string {
	if m != nil {
		return m.IgnoreTestSubstring
	}
	return nil
}

func (m *TestGroup) GetColumnHeader() []*TestGroup_ColumnHeader {
	if m != nil {
		return m.ColumnHeader
	}
	return nil
}

func (m *TestGroup) GetFallbackGrouping() TestGroup_FallbackGrouping {
	if m != nil && m.FallbackGrouping != nil {
		return *m.FallbackGrouping
	}
	return Default_TestGroup_FallbackGrouping
}

func (m *TestGroup) GetAlertStaleResultsHours() int32 {
	if m != nil && m.AlertStaleResultsHours != nil {
		return *m.AlertStaleResultsHours
	}
	return Default_TestGroup_AlertStaleResultsHours
}

func (m *TestGroup) GetNumFailuresToAlert() int32 {
	if m != nil && m.NumFailuresToAlert != nil {
		return *m.NumFailuresToAlert
	}
	return Default_TestGroup_NumFailuresToAlert
}

func (m *TestGroup) GetBugComponent() int32 {
	if m != nil && m.BugComponent != nil {
		return *m.BugComponent
	}
	return Default_TestGroup_BugComponent
}

func (m *TestGroup) GetCodeSearchPath() string {
	if m != nil && m.CodeSearchPath != nil {
		return *m.CodeSearchPath
	}
	return ""
}

func (m *TestGroup) GetNumColumnsRecent() int32 {
	if m != nil && m.NumColumnsRecent != nil {
		return *m.NumColumnsRecent
	}
	return Default_TestGroup_NumColumnsRecent
}

func (m *TestGroup) GetUseTestMetadata() bool {
	if m != nil && m.UseTestMetadata != nil {
		return *m.UseTestMetadata
	}
	return Default_TestGroup_UseTestMetadata
}

func (m *TestGroup) GetAlertMailToAddresses() string {
	if m != nil && m.AlertMailToAddresses != nil {
		return *m.AlertMailToAddresses
	}
	return ""
}

func (m *TestGroup) GetAlertMailSubject() string {
	if m != nil && m.AlertMailSubject != nil {
		return *m.AlertMailSubject
	}
	return ""
}

func (m *TestGroup) GetAlertMailFailureMessage() string {
	if m != nil && m.AlertMailFailureMessage != nil {
		return *m.AlertMailFailureMessage
	}
	return ""
}

func (m *TestGroup) GetAlertMailDebugUrl() string {
	if m != nil && m.AlertMailDebugUrl != nil {
		return *m.AlertMailDebugUrl
	}
	return ""
}

func (m *TestGroup) GetMinElapsedMinutesBetweenMails() int32 {
	if m != nil && m.MinElapsedMinutesBetweenMails != nil {
		return *m.MinElapsedMinutesBetweenMails
	}
	return Default_TestGroup_MinElapsedMinutesBetweenMails
}

func (m *TestGroup) GetUseConfigurationValuesAsAlertParams() bool {
	if m != nil && m.UseConfigurationValuesAsAlertParams != nil {
		return *m.UseConfigurationValuesAsAlertParams
	}
	return Default_TestGroup_UseConfigurationValuesAsAlertParams
}

func (m *TestGroup) GetEnableFlakyStatus() bool {
	if m != nil && m.EnableFlakyStatus != nil {
		return *m.EnableFlakyStatus
	}
	return Default_TestGroup_EnableFlakyStatus
}

func (m *TestGroup) GetUseKubernetesClient() bool {
	if m != nil && m.UseKubernetesClient != nil {
		return *m.UseKubernetesClient
	}
	return Default_TestGroup_UseKubernetesClient
}

func (m *TestGroup) GetIsExternal() bool {
	if m != nil && m.IsExternal != nil {
		return *m.IsExternal
	}
	return Default_TestGroup_IsExternal
}

func (m *TestGroup) GetTestNameConfig() *TestNameConfig {
	if m != nil {
		return m.TestNameConfig
	}
	return nil
}

// Custom column headers for defining extra column-heading rows from values in
// the test result. If no values are found in the test result, the empty
// string is used as the column heading. If more than one distinct value is
// found, a '*' is used to indicate an indeterminate value.
type TestGroup_ColumnHeader struct {
	// Types that are valid to be assigned to ColumnHeaderSource:
	//	*TestGroup_ColumnHeader_Label
	//	*TestGroup_ColumnHeader_Property
	//	*TestGroup_ColumnHeader_ConfigurationValue
	ColumnHeaderSource isTestGroup_ColumnHeader_ColumnHeaderSource `protobuf_oneof:"column_header_source" yaml:"-"`
	XXX_unrecognized   []byte                                      `yaml:"-"`
}

func (m *TestGroup_ColumnHeader) Reset()                    { *m = TestGroup_ColumnHeader{} }
func (m *TestGroup_ColumnHeader) String() string            { return proto.CompactTextString(m) }
func (*TestGroup_ColumnHeader) ProtoMessage()               {}
func (*TestGroup_ColumnHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type isTestGroup_ColumnHeader_ColumnHeaderSource interface {
	isTestGroup_ColumnHeader_ColumnHeaderSource()
}

type TestGroup_ColumnHeader_Label struct {
	Label string `protobuf:"bytes,1,opt,name=label,oneof" yaml:"label,omitempty"`
}
type TestGroup_ColumnHeader_Property struct {
	Property string `protobuf:"bytes,2,opt,name=property,oneof" yaml:"property,omitempty"`
}
type TestGroup_ColumnHeader_ConfigurationValue struct {
	ConfigurationValue string `protobuf:"bytes,3,opt,name=configuration_value,oneof" yaml:"configuration_value,omitempty"`
}

func (*TestGroup_ColumnHeader_Label) isTestGroup_ColumnHeader_ColumnHeaderSource()              {}
func (*TestGroup_ColumnHeader_Property) isTestGroup_ColumnHeader_ColumnHeaderSource()           {}
func (*TestGroup_ColumnHeader_ConfigurationValue) isTestGroup_ColumnHeader_ColumnHeaderSource() {}

func (m *TestGroup_ColumnHeader) GetColumnHeaderSource() isTestGroup_ColumnHeader_ColumnHeaderSource {
	if m != nil {
		return m.ColumnHeaderSource
	}
	return nil
}

func (m *TestGroup_ColumnHeader) GetLabel() string {
	if x, ok := m.GetColumnHeaderSource().(*TestGroup_ColumnHeader_Label); ok {
		return x.Label
	}
	return ""
}

func (m *TestGroup_ColumnHeader) GetProperty() string {
	if x, ok := m.GetColumnHeaderSource().(*TestGroup_ColumnHeader_Property); ok {
		return x.Property
	}
	return ""
}

func (m *TestGroup_ColumnHeader) GetConfigurationValue() string {
	if x, ok := m.GetColumnHeaderSource().(*TestGroup_ColumnHeader_ConfigurationValue); ok {
		return x.ConfigurationValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestGroup_ColumnHeader) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestGroup_ColumnHeader_OneofMarshaler, _TestGroup_ColumnHeader_OneofUnmarshaler, _TestGroup_ColumnHeader_OneofSizer, []interface{}{
		(*TestGroup_ColumnHeader_Label)(nil),
		(*TestGroup_ColumnHeader_Property)(nil),
		(*TestGroup_ColumnHeader_ConfigurationValue)(nil),
	}
}

func _TestGroup_ColumnHeader_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestGroup_ColumnHeader)
	// column_header_source
	switch x := m.ColumnHeaderSource.(type) {
	case *TestGroup_ColumnHeader_Label:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Label)
	case *TestGroup_ColumnHeader_Property:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Property)
	case *TestGroup_ColumnHeader_ConfigurationValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ConfigurationValue)
	case nil:
	default:
		return fmt.Errorf("TestGroup_ColumnHeader.ColumnHeaderSource has unexpected type %T", x)
	}
	return nil
}

func _TestGroup_ColumnHeader_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestGroup_ColumnHeader)
	switch tag {
	case 1: // column_header_source.label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ColumnHeaderSource = &TestGroup_ColumnHeader_Label{x}
		return true, err
	case 2: // column_header_source.property
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ColumnHeaderSource = &TestGroup_ColumnHeader_Property{x}
		return true, err
	case 3: // column_header_source.configuration_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ColumnHeaderSource = &TestGroup_ColumnHeader_ConfigurationValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _TestGroup_ColumnHeader_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestGroup_ColumnHeader)
	// column_header_source
	switch x := m.ColumnHeaderSource.(type) {
	case *TestGroup_ColumnHeader_Label:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Label)))
		n += len(x.Label)
	case *TestGroup_ColumnHeader_Property:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Property)))
		n += len(x.Property)
	case *TestGroup_ColumnHeader_ConfigurationValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ConfigurationValue)))
		n += len(x.ConfigurationValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Specifies the test name.
type TestNameConfig struct {
	// The name elements specifying the target test name for this tab.
	NameElements []*TestNameConfig_NameElement `protobuf:"bytes,1,rep,name=name_elements" yaml:"name_elements,omitempty,flow"`
	// Specifies a printf-style format string for name elements. The format
	// string should have as many conversions as there are name_elements.
	// For example, two name_elements could be used with name_format="%s: %s".
	NameFormat       *string `protobuf:"bytes,2,opt,name=name_format" yaml:"name_format,omitempty"`
	XXX_unrecognized []byte  `yaml:"-"`
}

func (m *TestNameConfig) Reset()                    { *m = TestNameConfig{} }
func (m *TestNameConfig) String() string            { return proto.CompactTextString(m) }
func (*TestNameConfig) ProtoMessage()               {}
func (*TestNameConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestNameConfig) GetNameElements() []*TestNameConfig_NameElement {
	if m != nil {
		return m.NameElements
	}
	return nil
}

func (m *TestNameConfig) GetNameFormat() string {
	if m != nil && m.NameFormat != nil {
		return *m.NameFormat
	}
	return ""
}

// Specifies name elements to be selected from sponge labels or configuration
// values to append to test's name.
// For example if a sponge result with build target name 'T1' and have
// labels "8xx", "abc" and 'platform-family' configuration value "iota",
// then specify <8xx or 7xx> <platform-family> <abc or def> in name elements
// would append "8xx iota abc" to this test's name.
type TestNameConfig_NameElement struct {
	// Types that are valid to be assigned to NameElementSource:
	//	*TestNameConfig_NameElement_Labels
	//	*TestNameConfig_NameElement_TargetConfig
	//	*TestNameConfig_NameElement_BuildTarget
	NameElementSource isTestNameConfig_NameElement_NameElementSource `protobuf_oneof:"name_element_source" yaml:"name_element_source,omitempty"`
	XXX_unrecognized  []byte                                         `yaml:"-"`
}

func (m *TestNameConfig_NameElement) Reset()                    { *m = TestNameConfig_NameElement{} }
func (m *TestNameConfig_NameElement) String() string            { return proto.CompactTextString(m) }
func (*TestNameConfig_NameElement) ProtoMessage()               {}
func (*TestNameConfig_NameElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type isTestNameConfig_NameElement_NameElementSource interface {
	isTestNameConfig_NameElement_NameElementSource()
}

type TestNameConfig_NameElement_Labels struct {
	Labels string `protobuf:"bytes,1,opt,name=labels,oneof" yaml:"labels,omitempty"`
}
type TestNameConfig_NameElement_TargetConfig struct {
	TargetConfig string `protobuf:"bytes,2,opt,name=target_config,oneof" yaml:"target_config,omitempty"`
}
type TestNameConfig_NameElement_BuildTarget struct {
	BuildTarget bool `protobuf:"varint,3,opt,name=build_target,oneof" yaml:"build_target,omitempty"`
}

func (*TestNameConfig_NameElement_Labels) isTestNameConfig_NameElement_NameElementSource()       {}
func (*TestNameConfig_NameElement_TargetConfig) isTestNameConfig_NameElement_NameElementSource() {}
func (*TestNameConfig_NameElement_BuildTarget) isTestNameConfig_NameElement_NameElementSource()  {}

func (m *TestNameConfig_NameElement) GetNameElementSource() isTestNameConfig_NameElement_NameElementSource {
	if m != nil {
		return m.NameElementSource
	}
	return nil
}

func (m *TestNameConfig_NameElement) GetLabels() string {
	if x, ok := m.GetNameElementSource().(*TestNameConfig_NameElement_Labels); ok {
		return x.Labels
	}
	return ""
}

func (m *TestNameConfig_NameElement) GetTargetConfig() string {
	if x, ok := m.GetNameElementSource().(*TestNameConfig_NameElement_TargetConfig); ok {
		return x.TargetConfig
	}
	return ""
}

func (m *TestNameConfig_NameElement) GetBuildTarget() bool {
	if x, ok := m.GetNameElementSource().(*TestNameConfig_NameElement_BuildTarget); ok {
		return x.BuildTarget
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestNameConfig_NameElement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestNameConfig_NameElement_OneofMarshaler, _TestNameConfig_NameElement_OneofUnmarshaler, _TestNameConfig_NameElement_OneofSizer, []interface{}{
		(*TestNameConfig_NameElement_Labels)(nil),
		(*TestNameConfig_NameElement_TargetConfig)(nil),
		(*TestNameConfig_NameElement_BuildTarget)(nil),
	}
}

func _TestNameConfig_NameElement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestNameConfig_NameElement)
	// name_element_source
	switch x := m.NameElementSource.(type) {
	case *TestNameConfig_NameElement_Labels:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Labels)
	case *TestNameConfig_NameElement_TargetConfig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TargetConfig)
	case *TestNameConfig_NameElement_BuildTarget:
		t := uint64(0)
		if x.BuildTarget {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TestNameConfig_NameElement.NameElementSource has unexpected type %T", x)
	}
	return nil
}

func _TestNameConfig_NameElement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestNameConfig_NameElement)
	switch tag {
	case 1: // name_element_source.labels
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.NameElementSource = &TestNameConfig_NameElement_Labels{x}
		return true, err
	case 2: // name_element_source.target_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.NameElementSource = &TestNameConfig_NameElement_TargetConfig{x}
		return true, err
	case 3: // name_element_source.build_target
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NameElementSource = &TestNameConfig_NameElement_BuildTarget{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _TestNameConfig_NameElement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestNameConfig_NameElement)
	// name_element_source
	switch x := m.NameElementSource.(type) {
	case *TestNameConfig_NameElement_Labels:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Labels)))
		n += len(x.Labels)
	case *TestNameConfig_NameElement_TargetConfig:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TargetConfig)))
		n += len(x.TargetConfig)
	case *TestNameConfig_NameElement_BuildTarget:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Specifies a dashboard.
type Dashboard struct {
	// A list of the tabs on the dashboard.
	DashboardTab []*DashboardTab `protobuf:"bytes,1,rep,name=dashboard_tab" yaml:"dashboard_tab,omitempty"`
	// A name for the Dashboard.
	Name             *string `protobuf:"bytes,2,opt,name=name" yaml:"name,omitempty"`
	XXX_unrecognized []byte  `yaml:"-"`
}

func (m *Dashboard) Reset()                    { *m = Dashboard{} }
func (m *Dashboard) String() string            { return proto.CompactTextString(m) }
func (*Dashboard) ProtoMessage()               {}
func (*Dashboard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Dashboard) GetDashboardTab() []*DashboardTab {
	if m != nil {
		return m.DashboardTab
	}
	return nil
}

func (m *Dashboard) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// Specifies a URL template plus options templates.
// These strings will be replaced by the JS client:
//   <environment>
//   <test-status>
//   <test-id>
//   <test-name>
//   <sponge-query>
//   <changelist>
//   <results-explorer>
//   <test-url>
//   <bug-component>
//   <cs-path>
// For searching CLs, these will be replaced. It will use the Nth custom
// column header.
//   <start-cl>
//   <end-cl>
//   <start-custom-N>
//   <end-custom-N>
type LinkTemplate struct {
	// The URL template.
	Url *string `protobuf:"bytes,1,opt,name=url" yaml:"url,omitempty"`
	// The options templates.
	Options          []*LinkOptionsTemplate `protobuf:"bytes,2,rep,name=options" yaml:"options,omitempty"`
	XXX_unrecognized []byte                 `yaml:"-"`
}

func (m *LinkTemplate) Reset()                    { *m = LinkTemplate{} }
func (m *LinkTemplate) String() string            { return proto.CompactTextString(m) }
func (*LinkTemplate) ProtoMessage()               {}
func (*LinkTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LinkTemplate) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *LinkTemplate) GetOptions() []*LinkOptionsTemplate {
	if m != nil {
		return m.Options
	}
	return nil
}

// A simple key/value pair for link options.
type LinkOptionsTemplate struct {
	// The key for the option. This is not expanded.
	Key *string `protobuf:"bytes,1,opt,name=key" yaml:"key,omitempty"`
	// The value for the option. This is expanded the same as the LinkTemplate.
	Value            *string `protobuf:"bytes,2,opt,name=value" yaml:"value,omitempty"`
	XXX_unrecognized []byte  `yaml:"-"`
}

func (m *LinkOptionsTemplate) Reset()                    { *m = LinkOptionsTemplate{} }
func (m *LinkOptionsTemplate) String() string            { return proto.CompactTextString(m) }
func (*LinkOptionsTemplate) ProtoMessage()               {}
func (*LinkOptionsTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LinkOptionsTemplate) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LinkOptionsTemplate) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// A single tab on a dashboard.
type DashboardTab struct {
	// The name of the dashboard tab to display in the client.
	Name *string `protobuf:"bytes,1,opt,name=name" yaml:"name,omitempty"`
	// The name of the TestGroup specifying the test results for this tab.
	TestGroupName *string `protobuf:"bytes,2,opt,name=test_group_name" yaml:"test_group_name,omitempty"`
	// Default bug component for manually filing bugs from the dashboard. This
	// value overrides the default in the TestGroup config so that dashboards may
	// be customized separately from the gatherer.
	BugComponent *int32 `protobuf:"varint,3,opt,name=bug_component,def=0" yaml:"bug_component,omitempty"`
	// Default code search path for changelist search links. This value overrides
	// the default in the TestGroup config so that dashboards may be customized
	// separately from the gatherer.
	CodeSearchPath *string `protobuf:"bytes,4,opt,name=code_search_path,def=" yaml:"code_search_path,omitempty"`
	// See TestGroup.num_columns_recent. This value overrides the default in the
	// TestGroup config so that dashboards may be customized separately from the
	// gatherer.
	NumColumnsRecent *int32 `protobuf:"varint,5,opt,name=num_columns_recent,def=5" yaml:"num_columns_recent,omitempty"`
	// Optional base options to apply to a tab. The base options apply to a tab
	// always. Explicitly specified options are appended to the base options to
	// form the complete list of options. There is no way to remove base options
	// when loading a tab.
	// The base options become part of the query string. For example, specify
	// "width=20&include-filter-by-regex=level_tests" to generate the tests in the
	// dashboard tab in compact view and filter out the tests containing the
	// regular expression 'level_tests'.
	// TODO(deitz): Use structured data to encode the options. The client can
	// use the same proto.
	BaseOptions *string `protobuf:"bytes,6,opt,name=base_options,def=" yaml:"base_options,omitempty"`
	// The URL template to visit after clicking on a cell. Default is appropriate
	// for Sponge.
	OpenTestTemplate *LinkTemplate `protobuf:"bytes,7,opt,name=open_test_template" yaml:"open_test_template,omitempty"`
	// The URL template to visit when filing a bug. Default is appropriate for
	// Buganizer.
	FileBugTemplate *LinkTemplate `protobuf:"bytes,8,opt,name=file_bug_template" yaml:"file_bug_template,omitempty"`
	// The URL template to visit when attaching a bug. Default is appropriate for
	// Buganizer.
	AttachBugTemplate *LinkTemplate `protobuf:"bytes,9,opt,name=attach_bug_template" yaml:"attach_bug_template,omitempty"`
	// Text to show in the about menu as a link to another view of the results.
	ResultsText *string `protobuf:"bytes,10,opt,name=results_text,def=See these results in Sponge" yaml:"results_text,omitempty"`
	// The URL template to visit after clicking . Default is appropriate for
	// Sponge.
	ResultsUrlTemplate *LinkTemplate `protobuf:"bytes,11,opt,name=results_url_template" yaml:"results_url_template,omitempty"`
	// The URL template to visit when searching for changelists. Defaults
	// appropriate for codesearch.
	CodeSearchUrlTemplate *LinkTemplate `protobuf:"bytes,12,opt,name=code_search_url_template" yaml:"code_search_url_template,omitempty"`
	XXX_unrecognized      []byte        `yaml:"-"`
}

func (m *DashboardTab) Reset()                    { *m = DashboardTab{} }
func (m *DashboardTab) String() string            { return proto.CompactTextString(m) }
func (*DashboardTab) ProtoMessage()               {}
func (*DashboardTab) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

const Default_DashboardTab_BugComponent int32 = 0
const Default_DashboardTab_NumColumnsRecent int32 = 5
const Default_DashboardTab_ResultsText string = "See these results in Sponge"

func (m *DashboardTab) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DashboardTab) GetTestGroupName() string {
	if m != nil && m.TestGroupName != nil {
		return *m.TestGroupName
	}
	return ""
}

func (m *DashboardTab) GetBugComponent() int32 {
	if m != nil && m.BugComponent != nil {
		return *m.BugComponent
	}
	return Default_DashboardTab_BugComponent
}

func (m *DashboardTab) GetCodeSearchPath() string {
	if m != nil && m.CodeSearchPath != nil {
		return *m.CodeSearchPath
	}
	return ""
}

func (m *DashboardTab) GetNumColumnsRecent() int32 {
	if m != nil && m.NumColumnsRecent != nil {
		return *m.NumColumnsRecent
	}
	return Default_DashboardTab_NumColumnsRecent
}

func (m *DashboardTab) GetBaseOptions() string {
	if m != nil && m.BaseOptions != nil {
		return *m.BaseOptions
	}
	return ""
}

func (m *DashboardTab) GetOpenTestTemplate() *LinkTemplate {
	if m != nil {
		return m.OpenTestTemplate
	}
	return nil
}

func (m *DashboardTab) GetFileBugTemplate() *LinkTemplate {
	if m != nil {
		return m.FileBugTemplate
	}
	return nil
}

func (m *DashboardTab) GetAttachBugTemplate() *LinkTemplate {
	if m != nil {
		return m.AttachBugTemplate
	}
	return nil
}

func (m *DashboardTab) GetResultsText() string {
	if m != nil && m.ResultsText != nil {
		return *m.ResultsText
	}
	return Default_DashboardTab_ResultsText
}

func (m *DashboardTab) GetResultsUrlTemplate() *LinkTemplate {
	if m != nil {
		return m.ResultsUrlTemplate
	}
	return nil
}

func (m *DashboardTab) GetCodeSearchUrlTemplate() *LinkTemplate {
	if m != nil {
		return m.CodeSearchUrlTemplate
	}
	return nil
}

// A single configuration specification used to create a coupled test gatherer
// and server.
//
// TODO(deitz): Decouple gathering of the test results from the dashboard
// servers, allowing the gathering to happen in a single process with
// arbitrary background work.
type SingleConfiguration struct {
	// A list of groups of tests to gather, typically one per dashboard tab.
	TestGroup []*TestGroup `protobuf:"bytes,1,rep,name=test_group" yaml:"test_group,omitempty"`
	// A dashboard specification.
	Dashboard        *Dashboard `protobuf:"bytes,2,opt,name=dashboard" yaml:"dashboard,omitempty"`
	XXX_unrecognized []byte     `yaml:"-"`
}

func (m *SingleConfiguration) Reset()                    { *m = SingleConfiguration{} }
func (m *SingleConfiguration) String() string            { return proto.CompactTextString(m) }
func (*SingleConfiguration) ProtoMessage()               {}
func (*SingleConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SingleConfiguration) GetTestGroup() []*TestGroup {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

func (m *SingleConfiguration) GetDashboard() *Dashboard {
	if m != nil {
		return m.Dashboard
	}
	return nil
}

// All of the dashboards served by a server.
type AllDashboards struct {
	// A list of all of the dashboards for a server.
	Dashboard        []*Dashboard `protobuf:"bytes,1,rep,name=dashboard" yaml:"dashboard,omitempty"`
	XXX_unrecognized []byte       `yaml:"-"`
}

func (m *AllDashboards) Reset()                    { *m = AllDashboards{} }
func (m *AllDashboards) String() string            { return proto.CompactTextString(m) }
func (*AllDashboards) ProtoMessage()               {}
func (*AllDashboards) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllDashboards) GetDashboard() []*Dashboard {
	if m != nil {
		return m.Dashboard
	}
	return nil
}

// A service configuration consisting of multiple test groups and dashboards.
type Configuration struct {
	// A list of groups of tests to gather.
	TestGroups []*TestGroup `protobuf:"bytes,1,rep,name=test_groups" yaml:"test_groups,omitempty"`
	// A list of all of the dashboards for a server.
	Dashboards       []*Dashboard `protobuf:"bytes,2,rep,name=dashboards" yaml:"dashboards,omitempty"`
	XXX_unrecognized []byte       `yaml:"-"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Configuration) GetTestGroups() []*TestGroup {
	if m != nil {
		return m.TestGroups
	}
	return nil
}

func (m *Configuration) GetDashboards() []*Dashboard {
	if m != nil {
		return m.Dashboards
	}
	return nil
}

// An updater request to update a test group.
type UpdateRequest struct {
	// The test group configuration to update.
	TestGroup        *TestGroup `protobuf:"bytes,1,opt,name=test_group" yaml:"test_group,omitempty"`
	XXX_unrecognized []byte     `yaml:"-"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateRequest) GetTestGroup() *TestGroup {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

// An updater response after updating a test group.
type UpdateResponse struct {
	// The time taken to perform the update in milliseconds.
	UpdateTimeMillis *uint32 `protobuf:"varint,1,opt,name=update_time_millis" yaml:"update_time_millis,omitempty"`
	// The size of the compressed output file in bytes.
	OutputSizeBytes  *uint32 `protobuf:"varint,2,opt,name=output_size_bytes" yaml:"output_size_bytes,omitempty"`
	XXX_unrecognized []byte  `yaml:"-"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateResponse) GetUpdateTimeMillis() uint32 {
	if m != nil && m.UpdateTimeMillis != nil {
		return *m.UpdateTimeMillis
	}
	return 0
}

func (m *UpdateResponse) GetOutputSizeBytes() uint32 {
	if m != nil && m.OutputSizeBytes != nil {
		return *m.OutputSizeBytes
	}
	return 0
}

func init() {
	proto.RegisterType((*TestGroup)(nil), "TestGroup")
	proto.RegisterType((*TestGroup_ColumnHeader)(nil), "TestGroup.ColumnHeader")
	proto.RegisterType((*TestNameConfig)(nil), "TestNameConfig")
	proto.RegisterType((*TestNameConfig_NameElement)(nil), "TestNameConfig.NameElement")
	proto.RegisterType((*Dashboard)(nil), "Dashboard")
	proto.RegisterType((*LinkTemplate)(nil), "LinkTemplate")
	proto.RegisterType((*LinkOptionsTemplate)(nil), "LinkOptionsTemplate")
	proto.RegisterType((*DashboardTab)(nil), "DashboardTab")
	proto.RegisterType((*SingleConfiguration)(nil), "SingleConfiguration")
	proto.RegisterType((*AllDashboards)(nil), "AllDashboards")
	proto.RegisterType((*Configuration)(nil), "Configuration")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterEnum("TestGroup_TestsName", TestGroup_TestsName_name, TestGroup_TestsName_value)
	proto.RegisterEnum("TestGroup_FallbackGrouping", TestGroup_FallbackGrouping_name, TestGroup_FallbackGrouping_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x72, 0x1a, 0x37,
	0x14, 0x0e, 0xb1, 0x9d, 0x98, 0x03, 0x6b, 0x63, 0x81, 0x6d, 0x05, 0xa7, 0x2d, 0x61, 0x92, 0x99,
	0xa4, 0x9d, 0x3a, 0x89, 0x33, 0x6d, 0x67, 0x7c, 0xd3, 0xc1, 0x0e, 0x21, 0x99, 0x52, 0xec, 0x1a,
	0x72, 0xad, 0x11, 0xac, 0xc0, 0x1b, 0x6b, 0x7f, 0xba, 0xd2, 0xb6, 0xa5, 0x97, 0xbd, 0xee, 0xe3,
	0xf4, 0x09, 0xfa, 0x64, 0x3d, 0xd2, 0xee, 0xc2, 0x62, 0xd3, 0x5c, 0x99, 0xd5, 0xf9, 0xce, 0xd1,
	0xa7, 0xef, 0xfc, 0x19, 0xaa, 0x93, 0x30, 0x98, 0x7a, 0xb3, 0xe3, 0x28, 0x0e, 0x75, 0xd8, 0xfe,
	0x1b, 0xa0, 0x3c, 0x12, 0x4a, 0xf7, 0xe2, 0x30, 0x89, 0x48, 0x15, 0x36, 0x03, 0xee, 0x0b, 0x5a,
	0x6a, 0x95, 0x9e, 0x97, 0x89, 0x03, 0x5b, 0xbf, 0x26, 0x22, 0x9e, 0xd3, 0xfb, 0xf6, 0xf3, 0x08,
	0x76, 0x5d, 0x3e, 0x57, 0x2c, 0x9c, 0xb2, 0x58, 0xa8, 0x44, 0x6a, 0x45, 0x37, 0xd0, 0xb0, 0x75,
	0x7a, 0xff, 0xcd, 0x2b, 0xf2, 0x18, 0x76, 0xbc, 0x59, 0x10, 0xc6, 0x82, 0x45, 0x22, 0x70, 0xbd,
	0x60, 0x46, 0x37, 0xd1, 0xb6, 0x7d, 0xba, 0xa9, 0xe3, 0x44, 0x90, 0x26, 0x54, 0x33, 0xeb, 0x38,
	0xf1, 0xa4, 0xa6, 0x5b, 0x05, 0xdb, 0x19, 0xec, 0x69, 0x24, 0xa0, 0x98, 0xb9, 0x99, 0x45, 0xa1,
	0xf4, 0x26, 0x73, 0xfa, 0x00, 0x01, 0x3b, 0x27, 0x8d, 0xe3, 0x05, 0x35, 0xfb, 0x4b, 0x0d, 0x10,
	0x72, 0xba, 0x37, 0xea, 0x0e, 0x47, 0x43, 0x36, 0xe8, 0xfc, 0xdc, 0x65, 0x1f, 0x7a, 0x83, 0x8b,
	0xab, 0x2e, 0x79, 0x06, 0x07, 0x33, 0xae, 0xaf, 0x45, 0xcc, 0x4c, 0x28, 0x86, 0x4f, 0x8b, 0x44,
	0xac, 0x3d, 0xa1, 0xe8, 0x43, 0x7b, 0xd3, 0xd6, 0x94, 0x4b, 0x25, 0xc8, 0x17, 0xb0, 0x9f, 0xd1,
	0xb0, 0x30, 0x95, 0x8c, 0x95, 0x8e, 0x0d, 0xd7, 0xed, 0xd6, 0x06, 0x3e, 0xf0, 0x18, 0x9c, 0x49,
	0x28, 0x13, 0x3f, 0x60, 0xd7, 0x82, 0xbb, 0x22, 0xa6, 0x65, 0x3c, 0xae, 0x9c, 0x1c, 0x16, 0x58,
	0x9c, 0x5b, 0xfb, 0x7b, 0x6b, 0x26, 0x03, 0xd8, 0xc3, 0xb8, 0x72, 0xcc, 0x27, 0x37, 0x6c, 0x66,
	0xcc, 0x26, 0x14, 0x58, 0xe6, 0x47, 0x05, 0x9f, 0x77, 0x19, 0xa6, 0x97, 0x41, 0x4e, 0x0f, 0xde,
	0x75, 0xfa, 0xfd, 0xb3, 0xce, 0xf9, 0x4f, 0xac, 0x77, 0x75, 0xf1, 0xf1, 0xf2, 0xc3, 0xa0, 0xc7,
	0x06, 0x17, 0x83, 0x2e, 0x79, 0x0a, 0x8f, 0xb8, 0x44, 0xde, 0x4c, 0x69, 0xfc, 0x9b, 0x8b, 0xcc,
	0xae, 0xc3, 0x24, 0x56, 0xb4, 0x62, 0xa5, 0x2e, 0xbd, 0x22, 0x2d, 0xd8, 0x0f, 0x12, 0x9f, 0x4d,
	0xb9, 0x27, 0x13, 0x84, 0x30, 0x1d, 0x32, 0xeb, 0x45, 0xab, 0x29, 0xe2, 0x0d, 0xa1, 0xe0, 0x8c,
	0x93, 0x19, 0x9b, 0x84, 0x7e, 0x14, 0x06, 0x22, 0xd0, 0xd4, 0xc9, 0x7d, 0x9b, 0x50, 0x9b, 0x84,
	0xae, 0x60, 0x4a, 0xf0, 0x78, 0x72, 0xcd, 0x22, 0xd4, 0x8c, 0xee, 0x98, 0xe4, 0x9e, 0xde, 0x43,
	0x71, 0x88, 0x89, 0x9b, 0x2a, 0xa0, 0xf0, 0xf6, 0x89, 0x71, 0xdd, 0x4d, 0x5d, 0xbf, 0xc3, 0x6b,
	0xf7, 0x12, 0x95, 0x09, 0xe7, 0x0b, 0xcd, 0x5d, 0xae, 0x39, 0xad, 0x15, 0xd5, 0x7d, 0x02, 0x87,
	0x29, 0x7d, 0x1f, 0xa9, 0x59, 0x5a, 0xae, 0x8b, 0x04, 0x15, 0x66, 0x61, 0x2f, 0xbb, 0xe3, 0x31,
	0x90, 0x02, 0x04, 0xf5, 0xff, 0x24, 0x26, 0x9a, 0x92, 0xcc, 0xfa, 0x14, 0x9a, 0x05, 0x6b, 0xf6,
	0x40, 0xbc, 0x4c, 0x29, 0x3e, 0x13, 0xb4, 0x9e, 0xa1, 0xbe, 0x84, 0x46, 0x01, 0xe5, 0x0a, 0xf3,
	0xd4, 0x24, 0x96, 0xb4, 0x91, 0xd9, 0xbf, 0x85, 0x27, 0xbe, 0x17, 0x30, 0x21, 0x79, 0xa4, 0x84,
	0xcb, 0xf0, 0x77, 0x82, 0xa4, 0xd9, 0x58, 0xe8, 0xdf, 0x85, 0x08, 0xac, 0x97, 0xa2, 0xfb, 0x69,
	0xe1, 0x7e, 0xff, 0x8a, 0xfc, 0x00, 0xcf, 0xcd, 0xbb, 0xd2, 0xa6, 0x48, 0x62, 0xae, 0xbd, 0x30,
	0x60, 0xbf, 0x71, 0x99, 0xa0, 0x0f, 0x57, 0xa9, 0xb4, 0x28, 0x54, 0xcc, 0x7d, 0x45, 0x0f, 0x8a,
	0xcf, 0x6d, 0x43, 0x5d, 0x04, 0x7c, 0x8c, 0x89, 0x9a, 0x4a, 0x7e, 0x33, 0x37, 0x49, 0xd3, 0x89,
	0xa2, 0x87, 0x45, 0xcc, 0x53, 0xd8, 0x37, 0xc1, 0x6f, 0x92, 0xb1, 0x88, 0x03, 0x61, 0x68, 0x4c,
	0xa4, 0x67, 0x64, 0xa5, 0x45, 0x54, 0x13, 0x2a, 0x9e, 0x62, 0xe2, 0x0f, 0x8d, 0x20, 0x2e, 0xe9,
	0xa3, 0xa2, 0xed, 0x05, 0xd4, 0xac, 0xe4, 0xb6, 0x39, 0x52, 0x92, 0xb4, 0x89, 0x80, 0xca, 0xc9,
	0xae, 0x2d, 0x31, 0xd3, 0x11, 0xe7, 0xf6, 0xb8, 0xf9, 0x09, 0xaa, 0x2b, 0xe5, 0xb9, 0x0b, 0x5b,
	0x92, 0x8f, 0x85, 0x4c, 0xbb, 0xf9, 0xfd, 0x3d, 0x42, 0x60, 0x3b, 0xeb, 0x8c, 0xac, 0xa5, 0xdf,
	0x9b, 0xac, 0xd7, 0xd7, 0x3c, 0xdd, 0x36, 0x36, 0x9a, 0xcf, 0x0e, 0xa0, 0xb1, 0xd2, 0x12, 0x4c,
	0x61, 0x31, 0x4e, 0x44, 0xfb, 0x97, 0x74, 0x6a, 0xd8, 0x86, 0x24, 0xfb, 0x70, 0xb7, 0x25, 0x6b,
	0x25, 0x72, 0x00, 0xa4, 0x70, 0x7c, 0xd5, 0xbd, 0xec, 0x77, 0xce, 0xbb, 0xb5, 0xfb, 0xb7, 0xe0,
	0x9d, 0xcb, 0xcb, 0xee, 0xe0, 0x6d, 0x6d, 0xa3, 0xfd, 0x57, 0x09, 0x6a, 0xb7, 0x5b, 0x05, 0xa5,
	0xf9, 0x9f, 0x66, 0xa9, 0xdd, 0x5b, 0x6f, 0x7b, 0xdb, 0x19, 0x99, 0xbb, 0x1f, 0x03, 0xbd, 0x6b,
	0xeb, 0x77, 0xce, 0xba, 0xfd, 0x21, 0x32, 0xa0, 0xd0, 0xb8, 0x6b, 0xfd, 0x60, 0x48, 0xfc, 0x5b,
	0x82, 0x9d, 0x55, 0x59, 0xc9, 0x09, 0x38, 0x56, 0x7c, 0x21, 0x85, 0x8f, 0xa9, 0x53, 0x28, 0xa7,
	0x99, 0x0a, 0x47, 0xb7, 0xe4, 0x3f, 0x36, 0x3f, 0xbb, 0x29, 0x86, 0xd4, 0xa1, 0x62, 0x7d, 0xa6,
	0x61, 0xec, 0x73, 0x9d, 0x8a, 0xdd, 0x9c, 0x41, 0xa5, 0x88, 0xa9, 0xc1, 0x03, 0x9b, 0x1e, 0xb5,
	0xc8, 0xcf, 0x21, 0x38, 0x9a, 0xc7, 0x33, 0xa1, 0xf3, 0x44, 0xe7, 0x49, 0x3a, 0x80, 0xaa, 0x99,
	0x9b, 0x2e, 0x4b, 0xcd, 0x36, 0x3b, 0xdb, 0x98, 0x9d, 0x7d, 0xa8, 0x17, 0xa9, 0xe5, 0xc9, 0xf9,
	0x11, 0xca, 0x6f, 0xb9, 0xba, 0x1e, 0x87, 0x3c, 0x76, 0xb1, 0x04, 0x1d, 0x37, 0xff, 0x40, 0xff,
	0x71, 0x46, 0xdf, 0x39, 0x5e, 0x40, 0x46, 0x7c, 0xbc, 0x18, 0xfc, 0xf6, 0xc6, 0xf6, 0x19, 0x54,
	0xfb, 0x5e, 0x70, 0x33, 0x12, 0x7e, 0x24, 0xb9, 0x16, 0xa4, 0x02, 0x1b, 0xa6, 0xc3, 0xd2, 0xad,
	0xf0, 0x0c, 0x1e, 0x86, 0x91, 0x29, 0x15, 0x85, 0x68, 0x13, 0xaa, 0x71, 0x6c, 0xc0, 0x17, 0xe9,
	0x59, 0xee, 0xd3, 0x7e, 0x0d, 0xf5, 0x35, 0xc7, 0x26, 0xd4, 0x8d, 0x98, 0x2f, 0x17, 0x4c, 0x5a,
	0x6e, 0xe9, 0xb5, 0xff, 0x6c, 0x40, 0x75, 0x2d, 0xab, 0x14, 0x7d, 0x08, 0xbb, 0xb6, 0x15, 0xec,
	0xa8, 0x65, 0x4b, 0xba, 0x77, 0xe7, 0xdd, 0xc6, 0xe7, 0xe6, 0xdd, 0xe6, 0x67, 0xe7, 0xdd, 0x56,
	0x3e, 0xef, 0x8c, 0xe6, 0x1c, 0x7b, 0x37, 0x7f, 0xeb, 0x83, 0xcc, 0xed, 0x05, 0x10, 0x6c, 0xa1,
	0x20, 0x1d, 0x84, 0x3a, 0x7b, 0x96, 0x5d, 0x33, 0x46, 0xd4, 0x15, 0xd9, 0x9e, 0xe3, 0x7e, 0xf0,
	0xa4, 0xd9, 0x79, 0xb3, 0x25, 0x72, 0x7b, 0x1d, 0xf2, 0x6b, 0xa8, 0x73, 0xad, 0x39, 0x52, 0x5c,
	0xc1, 0x96, 0xd7, 0x61, 0x5f, 0x43, 0x35, 0xdf, 0x0c, 0x1a, 0x67, 0x86, 0x5d, 0x38, 0xe5, 0xd3,
	0xa3, 0xa1, 0x10, 0x2d, 0xdc, 0x80, 0x4a, 0xb4, 0x32, 0x6b, 0xcb, 0x0b, 0x5a, 0x43, 0x14, 0x64,
	0x26, 0xc8, 0x37, 0xd0, 0xc8, 0x5d, 0x30, 0x8f, 0xcb, 0xf8, 0x95, 0x75, 0xf1, 0x5f, 0x02, 0x2d,
	0x6a, 0xb6, 0xe2, 0x50, 0x5d, 0xe3, 0xd0, 0x1e, 0x41, 0x7d, 0x88, 0xbd, 0x2a, 0xb3, 0x46, 0xc8,
	0x06, 0x09, 0xce, 0x69, 0x58, 0xa6, 0x2b, 0xab, 0x3a, 0x58, 0xae, 0x45, 0xd4, 0xbf, 0xbc, 0x28,
	0x4c, 0x9b, 0x48, 0x63, 0x5e, 0xa4, 0xbf, 0x8d, 0xcb, 0xb8, 0x23, 0xe5, 0xe2, 0x5b, 0xad, 0xe2,
	0xf3, 0x70, 0x4b, 0xfc, 0x25, 0x38, 0xab, 0xf7, 0x7f, 0x05, 0x95, 0xe5, 0xfd, 0x6a, 0x0d, 0x01,
	0x24, 0xb8, 0x08, 0x98, 0xd7, 0x72, 0x31, 0xe2, 0x4b, 0x70, 0x3e, 0x46, 0xb8, 0xe6, 0xc4, 0x95,
	0xc0, 0x7f, 0x83, 0x94, 0xbe, 0xf3, 0xa2, 0xd2, 0x6a, 0xc0, 0x76, 0x0f, 0x76, 0x72, 0x07, 0x85,
	0xc2, 0xdb, 0xc9, 0x4e, 0x12, 0x7b, 0xc2, 0xb4, 0x87, 0x7d, 0xea, 0x7b, 0x52, 0x7a, 0x69, 0xbf,
	0x3b, 0xe4, 0x11, 0xec, 0x85, 0x89, 0x8e, 0x12, 0x6c, 0x5b, 0xef, 0x4f, 0x2c, 0x92, 0x39, 0xc6,
	0xb6, 0x3a, 0x38, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x29, 0x51, 0xa1, 0x74, 0xa3, 0x09, 0x00,
	0x00,
}
