// Protocol buffer for configuring the Test Explorer.

syntax = "proto3";

// TODO: Package Name.

// Specifies a group of tests to gather.
message TestGroup {
  // Name of this TestGroup, for mapping dashboard tabs to tests.
  string name = 1;

  // A specification of a set of test results by a Sponge query as defined by
  // http://sponge.  For Guitar continuous builds, add the following to your
  // query: "label:guitar label:cbuild label:overview."
  string query = 2;

  // Number of days of test results to gather and serve.
  int32 days_of_results = 3;


  // Note: Changes to this enumeration should be reflected in testgrid.gcl.
  enum TestsName {
	TESTS_NAME_MIN = 0;
    TESTS_NAME_IGNORE = 1;
    TESTS_NAME_REPLACE = 2;
    TESTS_NAME_APPEND = 3;
  }

  // What to do with the 'Tests name' configuration value. It can replace the
  // name of the test, be appended to the name of the test, or ignored. If it is
  // ignored, then the name of the tests will be the build target.
  TestsName tests_name_policy = 6;

  // Custom column headers for defining extra column-heading rows from values in
  // the test result. If no values are found in the test result, the empty
  // string is used as the column heading. If more than one distinct value is
  // found, a '*' is used to indicate an indeterminate value.
  message ColumnHeader {
      // Use Sponge configuration values as header values where the value of the
      // configuration value becomes the header value.
      string configuration_value = 3;
  }
  repeated ColumnHeader column_header = 9;

  // Whether to use the kubernetes client instead of the sponge client.
  bool use_kubernetes_client = 24;

  // Whether the test group should be made visible in external TestGrid.
  // The group must be defined in the configs/external directory.
  bool is_external = 25;
}


// Specifies a dashboard.
message Dashboard {
  // A list of the tabs on the dashboard.
  repeated DashboardTab dashboard_tab = 1;
  // A name for the Dashboard.
  string name = 2;
}

message LinkTemplate {
  // The URL template.
  string url = 1;
  // The options templates.
  repeated LinkOptionsTemplate options = 2;
}

// A simple key/value pair for link options.
message LinkOptionsTemplate {
  // The key for the option. This is not expanded.
  string key = 1;
  // The value for the option. This is expanded the same as the LinkTemplate.
  string value = 2;
}

// A single tab on a dashboard.
message DashboardTab {
  // The name of the dashboard tab to display in the client.
  string name = 1;

  // The name of the TestGroup specifying the test results for this tab.
  string test_group_name = 2;

  // Default bug component for manually filing bugs from the dashboard
  int32 bug_component = 3;

  // Default code search path for changelist search links
  string code_search_path = 4;

  // Optional base options to apply to a tab. The base options apply to a tab
  // always. Explicitly specified options are appended to the base options to
  // form the complete list of options. There is no way to remove base options
  // when loading a tab.
  // The base options become part of the query string. For example, specify
  // "width=20&include-filter-by-regex=level_tests" to generate the tests in the
  // dashboard tab in compact view and filter out the tests containing the
  // regular expression 'level_tests'.
  string base_options = 6;

  // The URL template to visit after clicking on a cell.
  LinkTemplate open_test_template = 7;

  // The URL template to visit when filing a bug.
  LinkTemplate file_bug_template = 8;

  // The URL template to visit when attaching a bug
  LinkTemplate attach_bug_template = 9;

  // Text to show in the about menu as a link to another view of the results.
  string results_text = 10;

  // The URL template to visit after clicking.
  LinkTemplate results_url_template = 11;

  // The URL template to visit when searching for changelists.
  LinkTemplate code_search_url_template = 12;
}

// A service configuration consisting of multiple test groups and dashboards.
message Configuration {
  // A list of groups of tests to gather.
  repeated TestGroup test_groups = 1;

  // A list of all of the dashboards for a server.
  repeated Dashboard dashboards = 2;
}
