// Protocol buffer for configuring the Test Explorer.

syntax = "proto2";

// TODO: Package Name.

// Specifies a group of tests to gather.
message TestGroup {
  // Name of this TestGroup, for mapping dashboard tabs to tests.
  optional string name = 1;

  // A specification of a set of test results by a Sponge query as defined by
  // http://sponge.  For Guitar continuous builds, add the following to your
  // query: "label:guitar label:cbuild label:overview."
  optional string query = 2;

  // Number of days of test results to gather and serve.
  optional int32 days_of_results = 3 [default = 30];

  // Whether to ignore test results with the status PENDING.  Ignoring pending
  // test results is recommended because the result may not be associated with
  // a test name, and pending test results are not always cleaned up on retries.
  optional bool ignore_pending = 4 [default = true];

  // Whether to ignore test results with the status BUILT.  Ignoring built test
  // results is recommended because the result is likely related to tooling
  // associated with running the tests.
  optional bool ignore_built = 5 [default = true];

  // Note: Changes to this enumeration should be reflected in testgrid.gcl.
  enum TestsName {
    TESTS_NAME_IGNORE = 1;
    TESTS_NAME_REPLACE = 2;
    TESTS_NAME_APPEND = 3;
  }

  // What to do with the 'Tests name' configuration value. It can replace the
  // name of the test, be appended to the name of the test, or ignored. If it is
  // ignored, then the name of the tests will be the build target.
  // TODO(kenbayer): Consider making this generic, so that any configuration
  // value can replace or be appended to the test name.
  optional TestsName tests_name_policy = 6 [default = TESTS_NAME_IGNORE];

  // Whether to gather the test properties from Sponge.
  optional bool gather_test_properties = 7 [default = false];

  // Substrings to use to ignore test results. Tests with names that include
  // these substrings will be removed from the table.
  repeated string ignore_test_substring = 8;

  // Custom column headers for defining extra column-heading rows from values in
  // the test result. If no values are found in the test result, the empty
  // string is used as the column heading. If more than one distinct value is
  // found, a '*' is used to indicate an indeterminate value.
  message ColumnHeader {
    oneof column_header_source {
      // Use Sponge labels as header values. For example, a label value of
      // 'group=' will match Sponge labels starting with 'group=' and use their
      // suffix as the value.
      string label = 1;
      // Use Sponge test properties as header values where the value of the
      // property becomes the header value.
      string property = 2;
      // Use Sponge configuration values as header values where the value of the
      // configuration value becomes the header value.
      string configuration_value = 3;
    }
  }
  repeated ColumnHeader column_header = 9;

  // Note: Changes to this enumeration should be reflected in testgrid.gcl.
  enum FallbackGrouping {
    FALLBACK_GROUPING_NONE = 0;
    FALLBACK_GROUPING_DATE = 1;
    FALLBACK_GROUPING_LABELS = 2;
    FALLBACK_GROUPING_ID = 3;
  }

  // A fallback grouping strategy for grouping test results in columns.
  optional FallbackGrouping fallback_grouping = 10
      [default = FALLBACK_GROUPING_NONE];

  // Time in hours before an alert will be added to a test results table if the
  // run date of the latest results are older than this time.  If zero, no
  // alerts are raised.
  optional int32 alert_stale_results_hours = 11 [default = 0];

  // The number of consecutive test result failures to see before alerting of
  // a consistent failure. If zero, no alerts are raised.
  optional int32 num_failures_to_alert = 12 [default = 3];

  // Default bug component for automatically filing bugs.
  optional int32 bug_component = 13 [default = 0];

  // Default code search path for changelist search links.
  optional string code_search_path = 14 [default = ''];

  // The number of columns to consider "recent" for a variety of purposes,
  // including eliding tests with stale results, raising alerts, sending mail,
  // opening bugs, and summarizing the test data.
  optional int32 num_columns_recent = 15 [default = 5];

  // Whether to read the TEST_METADATA files for the test targets. Information
  // from the test metadata is sent to the client to allow it to open bugs
  // in specific components for some tests.
  optional bool use_test_metadata = 16 [default = false];

  // The comma-separated addresses to send mail.
  optional string alert_mail_to_addresses = 17 [default = ''];

  // Subject line of an alert mail.
  optional string alert_mail_subject = 18 [default = ''];

  // Failure message on mail.
  optional string alert_mail_failure_message = 19 [default = ''];

  // An url which will help in debugging failure. This will be hyperlinked on
  // failure message.
  optional string alert_mail_debug_url = 20 [default = ''];

  // Minimum time between sending mails.
  optional int32 min_elapsed_minutes_between_mails = 21 [default = 60];

  // Whether to read configuration values from invocation and use that as
  // params to send email alerts. If this is true, values for
  // alert_mail_to_addresses, alert_mail_failure_message and
  // alert_mail_debug_url will be gathered from invocation properties and will
  // get precedence.
  optional bool use_configuration_values_as_alert_params = 22 [default = false];

  // Whether to treat a combination of passes and failures within one test as a
  // flaky status.
  optional bool enable_flaky_status = 23 [default = false];

  // Whether to use the kubernetes client instead of the sponge client.
  optional bool use_kubernetes_client = 24 [default = false];

  // Whether the test group should be made visible in external TestGrid.
  // The group must be defined in the configs/external directory.
  optional bool is_external = 25 [default = false];

  // Specifies the test name for a test.
  optional TestNameConfig test_name_config = 26;
}

// Specifies the test name.
message TestNameConfig {
  // Specifies name elements to be selected from sponge labels or configuration
  // values to append to test's name.
  // For example if a sponge result with build target name 'T1' and have
  // labels "8xx", "abc" and 'platform-family' configuration value "iota",
  // then specify <8xx or 7xx> <platform-family> <abc or def> in name elements
  // would append "8xx iota abc" to this test's name.
  message NameElement {
    oneof name_element_source {
      // A space-delimited string of Sponge label candidates.
      // For example, if Sponge results may have labels "abc" or "def",
      // specify labels as "abc def" to append one or both of "abc" and "def"
      // to the test name.
      string labels = 1;
      // The key of a Sponge invocation's configuration value.
      // If the invocation has a configuration value with the specified key,
      // the value will be appended to the test's name.
      string target_config = 2;
      // Whether to use the build-target name of Sponge
      bool build_target = 3;
    }
  }

  // The name elements specifying the target test name for this tab.
  repeated NameElement name_elements = 1;

  // Specifies a printf-style format string for name elements. The format
  // string should have as many conversions as there are name_elements.
  // For example, two name_elements could be used with name_format="%s: %s".
  optional string name_format = 2;
}

// Specifies a dashboard.
message Dashboard {
  // A list of the tabs on the dashboard.
  repeated DashboardTab dashboard_tab = 1;
  // A name for the Dashboard.
  optional string name = 2;
}

// Specifies a URL template plus options templates.
// These strings will be replaced by the JS client:
//   <environment>
//   <test-status>
//   <test-id>
//   <test-name>
//   <sponge-query>
//   <changelist>
//   <results-explorer>
//   <test-url>
//   <bug-component>
//   <cs-path>
// For searching CLs, these will be replaced. It will use the Nth custom
// column header.
//   <start-cl>
//   <end-cl>
//   <start-custom-N>
//   <end-custom-N>
message LinkTemplate {
  // The URL template.
  optional string url = 1;
  // The options templates.
  repeated LinkOptionsTemplate options = 2;
}

// A simple key/value pair for link options.
message LinkOptionsTemplate {
  // The key for the option. This is not expanded.
  optional string key = 1;
  // The value for the option. This is expanded the same as the LinkTemplate.
  optional string value = 2;
}

// A single tab on a dashboard.
message DashboardTab {
  // The name of the dashboard tab to display in the client.
  optional string name = 1;

  // The name of the TestGroup specifying the test results for this tab.
  optional string test_group_name = 2;

  // Default bug component for manually filing bugs from the dashboard. This
  // value overrides the default in the TestGroup config so that dashboards may
  // be customized separately from the gatherer.
  optional int32 bug_component = 3 [default = 0];

  // Default code search path for changelist search links. This value overrides
  // the default in the TestGroup config so that dashboards may be customized
  // separately from the gatherer.
  optional string code_search_path = 4 [default = ''];

  // See TestGroup.num_columns_recent. This value overrides the default in the
  // TestGroup config so that dashboards may be customized separately from the
  // gatherer.
  optional int32 num_columns_recent = 5 [default = 5];

  // Optional base options to apply to a tab. The base options apply to a tab
  // always. Explicitly specified options are appended to the base options to
  // form the complete list of options. There is no way to remove base options
  // when loading a tab.
  // The base options become part of the query string. For example, specify
  // "width=20&include-filter-by-regex=level_tests" to generate the tests in the
  // dashboard tab in compact view and filter out the tests containing the
  // regular expression 'level_tests'.
  // TODO(deitz): Use structured data to encode the options. The client can
  // use the same proto.
  optional string base_options = 6 [default = ''];

  // The URL template to visit after clicking on a cell. Default is appropriate
  // for Sponge.
  optional LinkTemplate open_test_template = 7;

  // The URL template to visit when filing a bug. Default is appropriate for
  // Buganizer.
  optional LinkTemplate file_bug_template = 8;

  // The URL template to visit when attaching a bug. Default is appropriate for
  // Buganizer.
  optional LinkTemplate attach_bug_template = 9;

  // Text to show in the about menu as a link to another view of the results.
  optional string results_text = 10 [default = 'See these results in Sponge'];

  // The URL template to visit after clicking . Default is appropriate for
  // Sponge.
  optional LinkTemplate results_url_template = 11;

  // The URL template to visit when searching for changelists. Defaults
  // appropriate for codesearch.
  optional LinkTemplate code_search_url_template = 12;
}

// A single configuration specification used to create a coupled test gatherer
// and server.
//
// TODO(deitz): Decouple gathering of the test results from the dashboard
// servers, allowing the gathering to happen in a single process with
// arbitrary background work.
 message SingleConfiguration {
  // A list of groups of tests to gather, typically one per dashboard tab.
  repeated TestGroup test_group = 1;

  // A dashboard specification.
  optional Dashboard dashboard = 2;
}

// All of the dashboards served by a server.
message AllDashboards {
  // A list of all of the dashboards for a server.
  repeated Dashboard dashboard = 1;
}

// A service configuration consisting of multiple test groups and dashboards.
message Configuration {
  // A list of groups of tests to gather.
  repeated TestGroup test_groups = 1;

  // A list of all of the dashboards for a server.
  repeated Dashboard dashboards = 2;
}

// An updater request to update a test group.
message UpdateRequest {
  // The test group configuration to update.
  optional TestGroup test_group = 1;
}

// An updater response after updating a test group.
message UpdateResponse {
  // The time taken to perform the update in milliseconds.
  optional uint32 update_time_millis = 1;

  // The size of the compressed output file in bytes.
  optional uint32 output_size_bytes = 2;
}

// TODO - An updater server updates test groups upon request.

