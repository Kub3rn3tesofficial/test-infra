// Automatically generated by MockGen. DO NOT EDIT!
// Source: plugins.go

package main

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	sql "k8s.io/test-infra/velodrome/sql"
)

// Mock of InfluxDatabase interface
type MockInfluxDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockInfluxDatabaseRecorder
}

// Recorder for MockInfluxDatabase (not exported)
type _MockInfluxDatabaseRecorder struct {
	mock *MockInfluxDatabase
}

func NewMockInfluxDatabase(ctrl *gomock.Controller) *MockInfluxDatabase {
	mock := &MockInfluxDatabase{ctrl: ctrl}
	mock.recorder = &_MockInfluxDatabaseRecorder{mock}
	return mock
}

func (_m *MockInfluxDatabase) EXPECT() *_MockInfluxDatabaseRecorder {
	return _m.recorder
}

func (_m *MockInfluxDatabase) GetLastMeasurement(_param0 string) (time.Time, error) {
	ret := _m.ctrl.Call(_m, "GetLastMeasurement", _param0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInfluxDatabaseRecorder) GetLastMeasurement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastMeasurement", arg0)
}

func (_m *MockInfluxDatabase) Push(_param0 string, _param1 map[string]string, _param2 map[string]interface{}, _param3 time.Time) error {
	ret := _m.ctrl.Call(_m, "Push", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInfluxDatabaseRecorder) Push(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Push", arg0, arg1, arg2, arg3)
}

// Mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *_MockPluginRecorder
}

// Recorder for MockPlugin (not exported)
type _MockPluginRecorder struct {
	mock *MockPlugin
}

func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &_MockPluginRecorder{mock}
	return mock
}

func (_m *MockPlugin) EXPECT() *_MockPluginRecorder {
	return _m.recorder
}

func (_m *MockPlugin) ReceiveIssue(_param0 sql.Issue) error {
	ret := _m.ctrl.Call(_m, "ReceiveIssue", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) ReceiveIssue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReceiveIssue", arg0)
}

func (_m *MockPlugin) ReceiveComment(_param0 sql.Comment) error {
	ret := _m.ctrl.Call(_m, "ReceiveComment", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) ReceiveComment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReceiveComment", arg0)
}

func (_m *MockPlugin) ReceiveIssueEvent(_param0 sql.IssueEvent) error {
	ret := _m.ctrl.Call(_m, "ReceiveIssueEvent", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) ReceiveIssueEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReceiveIssueEvent", arg0)
}
